/*
  Fiddler, a UCI-compatible chess engine.
  Copyright (C) 2022 The Fiddler Authors (see AUTHORS.md file)

  Fiddler is free software: you can redistribute it and/or modify
  it under the terms of the GNU General Public License as published by
  the Free Software Foundation, either version 3 of the License, or
  (at your option) any later version.

  Fiddler is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details.

  You should have received a copy of the GNU General Public License
  along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/

//! Piece-Square Tables (PSTs).
//!
//! A PST is a table with an item for each piece at each square.
//! It grants a fixed value to the evaluation of a position for each piece,
//! granting benefits for being on "good" squares and penalties for pieces on
//! "bad" ones.
//! For instance, a knight is much more valuable near the center, so the PST
//! value for a knight on rank 4 and file 3 is positive.

use std::{intrinsics::transmute, mem::MaybeUninit};

use fiddler_base::{Board, Color, Move, Piece, Square};

use crate::evaluate::Score;

/// A lookup table for piece values.
/// The outer index is the type of the piece
/// (in order of Pawn, Knight, Bishop, Rook, Queen, and King)
/// and the inner index is the square of the piece (from White's point of view),
/// starting with A1 as the first index, then continuing on to B1, C1, and so
/// on until H8 as index 63.
type Pst = [[Score; 64]; Piece::NUM];

/// A PST which is given in millipawns.
type CentiPst = [[(i16, i16); 64]; Piece::NUM];

#[must_use]
/// Evaluate a board based on its PST value.
/// This is slow, so under most conditions it is recommended to use
/// `value_delta()` instead if you are making moves.
/// The first value in the return type is the midgame difference, and the second
/// is the endgame difference.
pub fn evaluate(board: &Board) -> Score {
    let mut score = Score::DRAW;

    for pt in Piece::ALL {
        for sq in board[pt] & board[Color::White] {
            score += PST[pt as usize][sq as usize];
        }
        for sq in board[pt] & board[Color::Black] {
            //Invert the square that Black is on, since positional values are
            //flipped (as pawns move the other way, etc)
            let alt_sq = sq.opposite();
            score -= PST[pt as usize][alt_sq as usize];
        }
    }

    score
}

#[must_use]
/// Get the difference in PST value which would be generated by making the move
/// `m` on `board`. The first value in the return tuple is the midgame
/// difference, and the second is the endgame difference. `pst_delta` will
/// reflect how the position improves for the player making the move,
/// independed of if the player is white or black.
///
/// # Panics
///
/// This function will panic if the given move is invalid.
pub fn delta(board: &Board, m: Move) -> Score {
    let from_sq = m.from_square();
    let to_sq = m.to_square();
    let mover_type = board.type_at_square(m.from_square()).unwrap();
    let mover_idx = mover_type as usize;
    let end_type = match m.promote_type() {
        Some(pt) => pt,
        None => mover_type,
    };
    let end_idx = end_type as usize;
    let (from_alt, to_alt) = match board.player {
        Color::White => (from_sq, to_sq),
        Color::Black => (from_sq.opposite(), to_sq.opposite()),
    };
    let (from_idx, to_idx) = (from_alt as usize, to_alt as usize);

    // you always lose the value of the square you moved from
    let mut delta = PST[end_idx][to_idx] - PST[mover_idx][from_idx];

    if board[!board.player].contains(m.to_square()) {
        // conventional capture
        let to_opposite_idx = to_alt.opposite() as usize;
        let capturee_idx = board.type_at_square(to_sq).unwrap() as usize;
        delta += PST[capturee_idx][to_opposite_idx];
    }

    if m.is_en_passant() {
        let to_opposite_idx = (to_alt - Color::White.pawn_direction()).opposite() as usize;
        delta += PST[Piece::Pawn as usize][to_opposite_idx];
    }

    if m.is_castle() {
        let is_queen_castle = to_sq.file() == 2;
        let (rook_from_idx, rook_to_idx) = if is_queen_castle {
            (Square::A1 as usize, Square::D1 as usize)
        } else {
            (Square::H1 as usize, Square::F1 as usize)
        };

        delta += PST[Piece::Rook as usize][rook_to_idx] - PST[Piece::Rook as usize][rook_from_idx];
    }

    delta
}

/// A function used for ergonomics to convert from a table of millipawn values
/// to a table of `Eval`s.
const fn expand_table(centi_table: &CentiPst) -> Pst {
    // we will overwrite the whole table later
    let mut table = [[MaybeUninit::uninit(); 64]; Piece::NUM];
    let mut piece_idx = 0;
    // I would use for-loops here, but those are unsupported in const fns.
    while piece_idx < Piece::NUM {
        let mut sq_idx = 0;
        while sq_idx < 64 {
            let int_score = centi_table[piece_idx][sq_idx];
            table[piece_idx][sq_idx] =
                MaybeUninit::new(Score::centipawns(int_score.0, int_score.1));
            sq_idx += 1;
        }
        piece_idx += 1;
    }
    unsafe { transmute(table) }
}

#[rustfmt::skip] // rustfmt likes to throw a million newlines in this
/// The main piece-square table. Evaluations are paired together as (midgame, 
/// endgame) to improve cache-friendliness. The indexing order of this table 
/// has its primary index as pieces, the secondary index as squares, and the 
/// innermost index as 0 for midgame and 1 for endgame.
pub const PST: Pst = expand_table(&[
    [ // N
        (-175, -52), (-15, -21), (-65, -21), (-44, -18), (-39, -28), (-41, -22), (-17, -22), (-91, -38),
        (-98, -14), (-68, -7), (-17, 0), (3, 0), (2, 0), (-23, 0), (-39, -5), (-45, -43),
        (-21, -35), (-9, 12), (20, 6), (12, 10), (18, 0), (29, 22), (12, -1), (-27, -26),
        (-13, -31), (-17, 4), (10, 14), (18, 20), (27, 0), (9, 1), (7, 0), (-6, -20),
        (-1, -17), (16, 3), (38, 15), (59, 23), (41, 17), (69, 22), (18, 6), (31, -21),
        (-3, -15), (28, 5), (8, 14), (71, -2), (58, 0), (2, 3), (46, -12), (24, -14),
        (-26, -34), (-19, -24), (65, -17), (-7, 3), (31, -6), (28, -9), (-4, -17), (-2, -38),
        (-87, -43), (-53, -56), (-42, -17), (-26, -20), (-12, -20), (-86, -15), (-49, -41), (-103, -36),
    ],
    [ // B
        (-63, -13), (-19, -4), (-11, -16), (-42, -17), (-44, -1), (-15, -16), (-31, -19), (-57, -1),
        (-33, -3), (-1, -4), (-3, -8), (-2, -3), (7, 0), (-9, 2), (26, 0), (-28, -1),
        (-6, 0), (2, 11), (13, 8), (24, 7), (21, 3), (10, 18), (5, 11), (-14, -6),
        (-16, -4), (-8, -7), (24, 14), (21, 5), (11, -1), (15, -2), (-6, -9), (-1, -7),
        (-3, 0), (12, 0), (9, 15), (29, 8), (32, 4), (21, 5), (4, 11), (8, -9),
        (-19, -5), (11, -7), (-35, -1), (24, 3), (2, -5), (-59, 0), (33, -3), (15, -7),
        (-26, 6), (-5, 6), (-5, 0), (-99, 0), (-73, 2), (-5, 1), (-20, 0), (-17, -18),
        (-24, -6), (-31, 0), (-53, 0), (-49, 0), (-28, -17), (-97, 0), (-35, -14), (-9, -22),
    ],
    [ // R
        (-5, 6), (-5, 7), (-5, 3), (-1, 0), (-2, -2), (11, -3), (-21, 0), (-33, 1),
        (-40, -10), (-30, 3), (-15, -5), (-12, -2), (-12, 0), (-6, -10), (-11, 3), (-34, 5),
        (-35, 1), (-30, 5), (-15, -2), (-10, -13), (-20, -2), (-24, -6), (-1, -5), (-26, -3),
        (-22, -6), (-11, 2), (-4, 0), (-12, -3), (-17, -6), (-26, -4), (-12, 0), (-20, -14),
        (-8, 0), (-17, 0), (6, 12), (2, 0), (0, -3), (0, 0), (-13, -8), (-7, -9),
        (0, -1), (7, 7), (7, 0), (14, 4), (4, -1), (29, -18), (21, -5), (7, -3),
        (9, 8), (22, 12), (42, 11), (37, 8), (36, 0), (39, 0), (43, 8), (30, -2),
        (0, 7), (22, 0), (15, -5), (5, -3), (11, 1), (-8, 4), (11, -3), (14, 4),
    ],
    [ // Q
        (-26, -8), (-42, -4), (-41, 6), (16, 0), (-26, 0), (-58, 0), (-16, 2), (-21, -4),
        (-96, -2), (-55, 3), (-1, 14), (-3, 0), (3, -1), (2, -4), (-7, 0), (0, -7),
        (-36, -2), (-3, 0), (0, 12), (0, 4), (2, 10), (18, 6), (0, 0), (3, 0),
        (-16, 1), (-19, 16), (-2, 0), (10, 6), (7, 9), (-1, 8), (6, -1), (0, 0),
        (-24, -5), (-18, 3), (-1, 0), (21, 0), (31, 0), (34, 1), (18, -1), (31, 0),
        (-16, -2), (-14, 0), (16, 0), (37, 4), (63, 2), (85, 11), (112, -5), (68, -19),
        (-31, 0), (-28, -3), (0, 1), (20, 0), (30, -3), (95, 0), (58, -5), (85, -15),
        (-10, -7), (11, 0), (24, 0), (16, 15), (42, 6), (38, 0), (44, 6), (48, -22),
    ],
    [ // P
        (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0),
        (-12, 0), (4, 4), (-15, -3), (-24, -9), (-2, -3), (23, -6), (27, 0), (-15, -3),
        (-10, -12), (-2, 4), (-4, -7), (-8, 1), (2, -3), (0, -11), (9, -2), (-9, -19),
        (-7, 9), (0, 14), (1, 1), (17, -5), (14, -6), (-6, -7), (-4, 3), (-19, -11),
        (3, 34), (19, 27), (6, 14), (25, 7), (16, 0), (10, 10), (14, 14), (-5, 14),
        (43, 76), (55, 72), (37, 48), (66, 46), (61, 27), (56, 40), (47, 55), (32, 45),
        (58, 92), (50, 74), (73, 76), (98, 74), (95, 56), (70, 54), (58, 45), (36, 71),
        (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0),
    ],
    [ // K
        (-50, -47), (8, -44), (7, -30), (-43, -29), (-16, -33), (-42, -23), (20, -44), (-37, -61),
        (-42, -32), (-15, -27), (-15, -15), (-33, -10), (-19, 0), (-5, -2), (8, -17), (-13, -26),
        (-44, -42), (-18, -11), (-14, 1), (-14, 6), (-10, 16), (-10, 12), (-9, 2), (-44, -27),
        (-46, -20), (0, -6), (-7, 24), (0, 27), (0, 20), (0, 16), (-1, 1), (-46, -13),
        (-23, -28), (18, 13), (27, 16), (15, 31), (9, 25), (19, 24), (19, 15), (-16, -21),
        (-6, -18), (26, -3), (32, 11), (15, 25), (18, 28), (40, 13), (34, 1), (0, 0),
        (-7, -11), (26, -6), (30, 6), (15, 11), (22, 0), (28, 6), (48, -8), (9, -21),
        (-34, -31), (-7, -43), (-22, -20), (-35, -10), (-19, -9), (-11, 5), (26, -35), (0, -34),
    ],
]);

#[cfg(test)]
mod tests {

    use super::*;
    use fiddler_base::{game::Game, movegen::ALL};

    fn delta_helper(fen: &str) {
        let mut g = Game::from_fen(fen).unwrap();
        let orig_eval = evaluate(g.board());
        for (m, _) in g.get_moves::<ALL>() {
            let new_eval = match g.board().player {
                Color::White => orig_eval + delta(g.board(), m),
                Color::Black => orig_eval - delta(g.board(), m),
            };
            g.make_move(m, &());
            // println!("{g}");
            assert_eq!(new_eval, evaluate(g.board()));
            g.undo().unwrap();
        }
    }

    #[test]
    /// Test that adding deltas matches the same result as taking the PST value
    /// from scratch.
    fn pst_delta_equals_base_result() {
        delta_helper("r1bq1b1r/ppp2kpp/2n5/3np3/2B5/8/PPPP1PPP/RNBQK2R w KQ - 0 7");
    }

    #[test]
    fn delta_captures() {
        delta_helper("r1bq1b1r/ppp2kpp/2n5/3n4/2BPp3/2P5/PP3PPP/RNBQK2R b KQ d3 0 8");
    }

    #[test]
    fn delta_promotion() {
        delta_helper("r4bkr/pPpq2pp/2n1b3/3n4/2BPp3/2P5/1P3PPP/RNBQK2R w KQ - 1 13");
    }
}
