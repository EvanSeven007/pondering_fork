/*
  Fiddler, a UCI-compatible chess engine.
  Copyright (C) 2022 The Fiddler Authors (see AUTHORS.md file)

  Fiddler is free software: you can redistribute it and/or modify
  it under the terms of the GNU General Public License as published by
  the Free Software Foundation, either version 3 of the License, or
  (at your option) any later version.

  Fiddler is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details.

  You should have received a copy of the GNU General Public License
  along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/

//! Piece-Square Tables (PSTs).
//!
//! A PST is a table with an item for each piece at each square.
//! It grants a fixed value to the evaluation of a position for each piece,
//! granting benefits for being on "good" squares and penalties for pieces on
//! "bad" ones.
//! For instance, a knight is much more valuable near the center, so the PST
//! value for a knight on rank 4 and file 3 is positive.

use std::intrinsics::transmute;

use fiddler_base::{Board, Color, Move, Piece, Square};

use crate::evaluate::Score;

/// A lookup table for piece values.
/// The outer index is the type of the piece
/// (in order of Pawn, Knight, Bishop, Rook, Queen, and King)
/// and the inner index is the square of the piece (from White's point of view),
/// starting with A1 as the first index, then continuing on to B1, C1, and so
/// on until H8 as index 63.
type Pst = [[Score; 64]; Piece::NUM];

#[must_use]
/// Evaluate a board based on its PST value.
/// This is slow, so under most conditions it is recommended to use
/// `value_delta()` instead if you are making moves.
/// The first value in the return type is the midgame difference, and the second
/// is the endgame difference.
pub fn evaluate(board: &Board) -> Score {
    let mut score = Score::DRAW;

    for pt in Piece::ALL {
        for sq in board[pt] & board[Color::White] {
            score += PST[pt as usize][sq as usize];
        }
        for sq in board[pt] & board[Color::Black] {
            //Invert the square that Black is on, since positional values are
            //flipped (as pawns move the other way, etc)
            let alt_sq = sq.opposite();
            score -= PST[pt as usize][alt_sq as usize];
        }
    }

    score
}

#[must_use]
/// Get the difference in PST value which would be generated by making the move
/// `m` on `board`. The first value in the return tuple is the midgame
/// difference, and the second is the endgame difference. `pst_delta` will
/// reflect how the position improves for the player making the move,
/// independed of if the player is white or black.
///
/// # Panics
///
/// This function will panic if the given move is invalid.
pub fn delta(board: &Board, m: Move) -> Score {
    let from_sq = m.from_square();
    let to_sq = m.to_square();
    let mover_type = board.type_at_square(m.from_square()).unwrap();
    let mover_idx = mover_type as usize;
    let end_type = match m.promote_type() {
        Some(pt) => pt,
        None => mover_type,
    };
    let end_idx = end_type as usize;
    let (from_alt, to_alt) = match board.player {
        Color::White => (from_sq, to_sq),
        Color::Black => (from_sq.opposite(), to_sq.opposite()),
    };
    let (from_idx, to_idx) = (from_alt as usize, to_alt as usize);

    // you always lose the value of the square you moved from
    let mut delta = PST[end_idx][to_idx] - PST[mover_idx][from_idx];

    if board[!board.player].contains(m.to_square()) {
        // conventional capture
        let to_opposite_idx = to_alt.opposite() as usize;
        let capturee_idx = board.type_at_square(to_sq).unwrap() as usize;
        delta += PST[capturee_idx][to_opposite_idx];
    }

    if m.is_en_passant() {
        let to_opposite_idx = (to_alt - Color::White.pawn_direction()).opposite() as usize;
        delta += PST[Piece::Pawn as usize][to_opposite_idx];
    }

    if m.is_castle() {
        let is_queen_castle = to_sq.file() == 2;
        let (rook_from_idx, rook_to_idx) = if is_queen_castle {
            (Square::A1 as usize, Square::D1 as usize)
        } else {
            (Square::H1 as usize, Square::F1 as usize)
        };

        delta += PST[Piece::Rook as usize][rook_to_idx] - PST[Piece::Rook as usize][rook_from_idx];
    }

    delta
}

#[rustfmt::skip] // rustfmt likes to throw a million newlines in this
/// The main piece-square table. Evaluations are paired together as (midgame, 
/// endgame) to improve cache-friendliness. The indexing order of this table 
/// has its primary index as pieces, the secondary index as squares, and the 
/// innermost index as 0 for midgame and 1 for endgame.
pub const PST: Pst = unsafe {transmute([
    [ // N
        (-173i16, -52i16), (-4, -21), (-62, -20), (-39, -16), (-33, -26), (-38, -21), (-7, -20), (-89, -38), 
        (-96, -14), (-66, -7), (-17, 0), (5, 0), (5, 0), (-21, -1), (-39, -5), (-42, -43), 
        (-19, -33), (-11, 9), (6, 4), (12, 10), (17, 0), (15, 19), (10, -1), (-22, -26), 
        (-13, -29), (-16, 2), (9, 13), (13, 19), (21, 0), (8, 1), (8, 0), (-4, -20), 
        (0, -15), (14, 3), (32, 14), (51, 20), (30, 14), (63, 20), (14, 4), (28, -20), 
        (-5, -15), (26, 3), (8, 14), (63, -1), (55, 0), (6, 1), (44, -12), (21, -14), 
        (-26, -32), (-17, -22), (60, -17), (-5, 3), (28, -6), (26, -9), (-4, -17), (-2, -38), 
        (-87, -42), (-52, -56), (-41, -15), (-26, -18), (-10, -19), (-84, -15), (-47, -41), (-103, -36), 
    ],
    [ // B
        (-60, -13), (-17, -4), (-1, -14), (-35, -14), (-38, -1), (-11, -15), (-30, -18), (-55, -1), 
        (-35, -3), (0, -4), (-5, -7), (-2, -1), (5, 0), (-7, 0), (22, -1), (-30, -1), 
        (-10, 0), (0, 8), (11, 7), (12, 6), (10, 2), (11, 15), (3, 8), (-14, -6), 
        (-15, -3), (-8, -7), (14, 11), (19, 4), (10, -2), (4, -2), (-4, -9), (0, -7), 
        (-4, 0), (6, 0), (6, 14), (27, 7), (30, 1), (20, 4), (0, 9), (5, -8), 
        (-18, -4), (9, -7), (-26, 0), (21, 0), (2, -5), (-50, 0), (30, -3), (10, -6), 
        (-24, 4), (-5, 5), (-5, 0), (-94, 0), (-68, 2), (-2, 0), (-18, 0), (-19, -18), 
        (-24, -6), (-29, 0), (-53, 0), (-47, 0), (-28, -15), (-95, 0), (-34, -14), (-9, -22), 
    ],
    [ // R
        (-4, 6), (-5, 7), (-4, 5), (-1, 1), (-1, 0), (5, -2), (-19, 0), (-23, 2), 
        (-35, -10), (-25, 2), (-12, -3), (-8, 0), (-7, 0), (-4, -10), (-9, 0), (-34, 2), 
        (-32, 0), (-29, 4), (-14, -1), (-8, -11), (-17, -2), (-21, -6), (-1, -6), (-26, -4), 
        (-22, -7), (-11, 1), (-4, 0), (-9, -3), (-14, -6), (-23, -5), (-11, -1), (-19, -15), 
        (-8, -1), (-17, -1), (4, 9), (0, -1), (-1, -3), (0, -1), (-13, -9), (-8, -10), 
        (-1, 0), (4, 6), (6, 0), (12, 3), (3, 0), (27, -17), (20, -6), (5, -4), 
        (9, 7), (19, 12), (39, 11), (36, 7), (33, 0), (38, 0), (40, 5), (26, -2), 
        (0, 9), (21, 0), (15, -1), (7, 0), (12, 1), (-6, 4), (9, -3), (11, 4), 
    ],
    [ // Q
        (-26, -8), (-38, -2), (-32, 5), (6, 0), (-23, 0), (-53, 0), (-15, 1), (-21, -3), 
        (-88, -1), (-53, 3), (-3, 13), (-2, 0), (6, 0), (1, -3), (-7, 0), (0, -7), 
        (-35, -1), (-4, 0), (-1, 11), (0, 3), (0, 10), (17, 4), (0, 0), (3, 0), 
        (-17, 1), (-19, 16), (-2, 0), (6, 5), (6, 9), (0, 7), (5, 0), (0, 0), 
        (-24, -4), (-18, 2), (-1, 0), (17, 0), (29, 0), (32, 0), (17, 0), (24, 0), 
        (-17, -1), (-14, 0), (12, 0), (34, 3), (60, 0), (81, 9), (106, -5), (64, -19), 
        (-33, 0), (-29, -2), (0, 1), (20, 0), (27, -2), (89, 0), (55, -5), (80, -15), 
        (-11, -6), (10, 0), (23, 0), (14, 14), (41, 5), (35, 0), (41, 4), (45, -21), 
    ],
    [ // P
        (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), 
        (-11, 0), (6, 3), (-14, -2), (-13, -7), (1, -1), (15, -4), (21, 1), (-14, -4), 
        (-9, -11), (-4, 3), (-4, -7), (-5, 0), (3, -4), (1, -11), (6, -2), (-8, -16), 
        (-8, 6), (-1, 12), (1, -1), (11, -8), (10, -8), (-2, -8), (-3, 2), (-16, -12), 
        (1, 29), (16, 25), (4, 12), (19, 4), (11, -1), (9, 5), (13, 11), (-6, 10), 
        (37, 79), (53, 78), (38, 53), (61, 49), (59, 26), (55, 39), (46, 57), (29, 50), 
        (57, 101), (51, 83), (72, 80), (99, 78), (96, 60), (69, 55), (55, 48), (33, 77), 
        (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), 
    ],
    [ // K
        (-50, -46), (6, -43), (3, -29), (-38, -28), (-14, -28), (-32, -15), (16, -36), (-36, -57), 
        (-39, -31), (-12, -26), (-12, -15), (-30, -10), (-14, -2), (-5, -5), (8, -19), (-12, -22), 
        (-42, -40), (-14, -12), (-12, -1), (-12, 2), (-9, 11), (-8, 8), (-7, 0), (-38, -21), 
        (-44, -20), (0, -8), (-5, 18), (0, 20), (0, 14), (0, 12), (-3, -1), (-44, -11), 
        (-22, -26), (18, 12), (25, 14), (13, 27), (8, 21), (19, 20), (18, 13), (-14, -16), 
        (-4, -16), (26, -1), (32, 10), (13, 22), (17, 23), (40, 13), (33, 3), (0, 2), 
        (-5, -11), (25, -4), (28, 5), (15, 9), (21, 0), (27, 6), (45, -6), (9, -19), 
        (-34, -31), (-7, -41), (-20, -20), (-33, -8), (-18, -7), (-11, 5), (26, -33), (0, -32), 
    ],
])};

#[cfg(test)]
mod tests {

    use super::*;
    use fiddler_base::{game::Game, movegen::ALL};

    fn delta_helper(fen: &str) {
        let mut g = Game::from_fen(fen).unwrap();
        let orig_eval = evaluate(g.board());
        for (m, _) in g.get_moves::<ALL>() {
            let new_eval = match g.board().player {
                Color::White => orig_eval + delta(g.board(), m),
                Color::Black => orig_eval - delta(g.board(), m),
            };
            g.make_move(m, &());
            // println!("{g}");
            assert_eq!(new_eval, evaluate(g.board()));
            g.undo().unwrap();
        }
    }

    #[test]
    /// Test that adding deltas matches the same result as taking the PST value
    /// from scratch.
    fn pst_delta_equals_base_result() {
        delta_helper("r1bq1b1r/ppp2kpp/2n5/3np3/2B5/8/PPPP1PPP/RNBQK2R w KQ - 0 7");
    }

    #[test]
    fn delta_captures() {
        delta_helper("r1bq1b1r/ppp2kpp/2n5/3n4/2BPp3/2P5/PP3PPP/RNBQK2R b KQ d3 0 8");
    }

    #[test]
    fn delta_promotion() {
        delta_helper("r4bkr/pPpq2pp/2n1b3/3n4/2BPp3/2P5/1P3PPP/RNBQK2R w KQ - 1 13");
    }
}
