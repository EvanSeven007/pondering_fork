/*
  Fiddler, a UCI-compatible chess engine.
  Copyright (C) 2022 The Fiddler Authors (see AUTHORS.md file)

  Fiddler is free software: you can redistribute it and/or modify
  it under the terms of the GNU General Public License as published by
  the Free Software Foundation, either version 3 of the License, or
  (at your option) any later version.

  Fiddler is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details.

  You should have received a copy of the GNU General Public License
  along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/

//! Piece-Square Tables (PSTs).
//!
//! A PST is a table with an item for each piece at each square. It grants a
//! fixed value to the evaluation of a position for each piece, granting
//! benefits for being on "good" squares and penalties for pieces on "bad" ones.
//! For instance, a knight is much more valuable near the center, so the PST
//! value for a knight on rank 4 and file 3 is positive.

use std::{intrinsics::transmute, mem::MaybeUninit};

use fiddler_base::{Board, Color, Move, Piece, Square};

use crate::evaluate::Score;

/// A lookup table for piece values. The outer index is the type of the piece
/// (in order of Pawn, Knight, Bishop, Rook, Queen, and King)
/// and the inner index is the square of the piece (from White's point of view)
/// , starting with A1 as the first index, then continuing on to B1, C1, and so
/// on until H8 as index 63.
type Pst = [[Score; 64]; Piece::NUM_TYPES];

/// A PST which is given in millipawns.
type CentiPst = [[(i16, i16); 64]; Piece::NUM_TYPES];

/// Evaluate a board based on its PST value. This is slow, so under most
/// conditions it is recommended to use `value_delta()` instead if you are making
/// moves. The first value in the return type is the midgame difference, and
/// the second is the endgame difference.
pub fn pst_evaluate(board: &Board) -> Score {
    let mut score = Score::DRAW;

    for pt in Piece::ALL_TYPES {
        for sq in board[pt] & board[Color::White] {
            score += PST[pt as usize][sq as usize];
        }
        for sq in board[pt] & board[Color::Black] {
            //Invert the square that Black is on, since positional values are
            //flipped (as pawns move the other way, etc)
            let alt_sq = sq.opposite();
            score -= PST[pt as usize][alt_sq as usize];
        }
    }

    score
}

/// Get the difference in PST value which would be generated by making the move
/// `m` on `board`. The first value in the return tuple is the midgame
/// difference, and the second is the endgame difference. `pst_delta` will
/// reflect how the position improves for the player making the move,
/// independed of if the player is white or black.
///
/// # Panics
///
/// `pst_delta` will panic if the given move is invalid.
pub fn pst_delta(board: &Board, m: Move) -> Score {
    let from_sq = m.from_square();
    let to_sq = m.to_square();
    let mover_type = board.type_at_square(m.from_square()).unwrap();
    let mover_idx = mover_type as usize;
    let end_type = match m.promote_type() {
        Some(pt) => pt,
        None => mover_type,
    };
    let end_idx = end_type as usize;
    let (from_alt, to_alt) = match board.player {
        Color::White => (from_sq, to_sq),
        Color::Black => (from_sq.opposite(), to_sq.opposite()),
    };
    let (from_idx, to_idx) = (from_alt as usize, to_alt as usize);

    // you always lose the value of the square you moved from
    let mut delta = PST[end_idx][to_idx] - PST[mover_idx][from_idx];

    if board[!board.player].contains(m.to_square()) {
        // conventional capture
        let to_opposite_idx = to_alt.opposite() as usize;
        let capturee_idx = board.type_at_square(to_sq).unwrap() as usize;
        delta += PST[capturee_idx][to_opposite_idx];
    }

    if m.is_en_passant() {
        let to_opposite_idx = (to_alt - Color::White.pawn_direction()).opposite() as usize;
        delta += PST[Piece::Pawn as usize][to_opposite_idx];
    }

    if m.is_castle() {
        let is_queen_castle = to_sq.file() == 2;
        let (rook_from_idx, rook_to_idx) = match is_queen_castle {
            true => (Square::A1 as usize, Square::D1 as usize),
            false => (Square::H1 as usize, Square::F1 as usize),
        };

        delta += PST[Piece::Rook as usize][rook_to_idx] - PST[Piece::Rook as usize][rook_from_idx];
    }

    delta
}

/// A function used for ergonomics to convert from a table of millipawn values
/// to a table of `Eval`s.
const fn expand_table(centi_table: CentiPst) -> Pst {
    // we will overwrite the whole table later
    let mut table = [[unsafe { MaybeUninit::uninit().assume_init() }; 64]; Piece::NUM_TYPES];
    let mut piece_idx = 0;
    // I would use for-loops here, but those are unsupported in const fns.
    while piece_idx < Piece::NUM_TYPES {
        let mut sq_idx = 0;
        while sq_idx < 64 {
            let int_score = centi_table[piece_idx][sq_idx];
            table[piece_idx][sq_idx] =
                MaybeUninit::new(Score::centipawns(int_score.0, int_score.1));
            sq_idx += 1;
        }
        piece_idx += 1;
    }
    unsafe { transmute(table) }
}

#[rustfmt::skip] // rustfmt likes to throw a million newlines in this
/// The main piece-square table. Evaluations are paired together as (midgame, 
/// endgame) to improve cache-friendliness. The indexing order of this table 
/// has its primary index as pieces, the secondary index as squares, and the 
/// innermost index as 0 for midgame and 1 for endgame.
pub const PST: Pst = expand_table([
    [ // N
        (-179, -51), (-19, -23), (-68, -26), (-52, -23), (-47, -33), (-46, -18), (-20, -17), (-93, -34),
        (-97, -16), (-70, -11), (-18, 2), (0, 0), (0, -1), (-29, 2), (-40, -2), (-45, -44),
        (-33, -35), (-9, 16), (33, 6), (11, 6), (13, 1), (40, 28), (14, 4), (-37, -24),
        (-12, -31), (-14, 7), (10, 16), (14, 16), (22, 1), (5, 3), (4, 1), (-8, -22),
        (-2, -21), (15, 7), (41, 12), (63, 25), (44, 22), (75, 21), (17, 10), (33, -25),
        (-3, -19), (32, 7), (0, 13), (75, -3), (56, 1), (-8, 2), (46, -7), (25, -13),
        (-26, -35), (-24, -24), (67, -13), (-10, 5), (34, -3), (32, -7), (-3, -18), (-6, -35),
        (-89, -45), (-53, -51), (-47, -16), (-27, -24), (-12, -22), (-91, -16), (-49, -43), (-108, -34),
    ],
    [ // B
        (-62, -12), (-18, -4), (-12, -20), (-54, -19), (-49, -4), (-11, -16), (-36, -19), (-57, -2),
        (-29, -3), (0, -5), (3, -8), (2, -2), (11, 2), (-12, 3), (27, 5), (-23, 0),
        (-3, 2), (9, 17), (8, 15), (34, 7), (29, 3), (2, 18), (11, 14), (-15, -2),
        (-21, -10), (-14, -4), (31, 18), (15, 11), (6, -2), (23, -1), (-11, -10), (-5, -3),
        (-2, -7), (17, -4), (8, 14), (24, 8), (34, 12), (16, 4), (10, 10), (9, -7),
        (-16, -8), (18, -3), (-51, -1), (28, 4), (3, -4), (-80, 4), (35, -3), (21, -10),
        (-30, 6), (-9, 10), (-5, 0), (-111, 3), (-83, 5), (-5, 5), (-29, 2), (-10, -22),
        (-28, -11), (-36, -2), (-53, 3), (-52, 1), (-32, -17), (-103, 5), (-32, -10), (-11, -22),
    ],
    [ // R
        (-22, 10), (-7, 7), (-4, 1), (3, 1), (0, -2), (1, -1), (-17, 1), (-44, 0),
        (-49, -8), (-35, 5), (-19, -8), (-19, -2), (-23, -2), (-18, -13), (-11, 7), (-32, 7),
        (-39, 2), (-26, 1), (-15, -3), (-15, -19), (-22, -3), (-25, -3), (1, -6), (-20, -6),
        (-20, -6), (-13, 5), (-8, -4), (-22, -2), (-22, -4), (-26, -3), (-16, -1), (-19, -10),
        (-4, 2), (-21, -1), (10, 11), (4, -2), (-4, -2), (-2, 7), (-10, -11), (-1, -6),
        (4, -6), (9, 3), (8, 2), (15, 0), (5, -3), (28, -18), (23, -3), (10, -6),
        (8, 6), (22, 10), (40, 12), (40, 10), (38, 2), (44, 0), (48, 12), (37, 0),
        (0, 0), (21, 4), (14, -12), (0, -9), (10, -3), (-13, 7), (14, -3), (23, 0),
    ],
    [ // Q
        (-28, -8), (-52, -5), (-51, 1), (27, -1), (-27, 1), (-69, -2), (-15, 3), (-19, -9),
        (-107, -2), (-58, 7), (0, 19), (-2, 0), (0, -2), (0, -4), (-8, 0), (-2, -3),
        (-42, -10), (-6, -2), (-1, 11), (-4, 3), (1, 14), (11, 6), (-1, 0), (-2, 1),
        (-12, -1), (-18, 12), (-3, 2), (18, 5), (2, 10), (-3, 5), (3, -6), (5, 2),
        (-20, -6), (-14, 4), (-2, 1), (25, -3), (27, 1), (33, 0), (20, -2), (38, -1),
        (-17, -4), (-12, -2), (18, -2), (40, 6), (64, 6), (89, 16), (116, -1), (70, -22),
        (-23, -5), (-23, -9), (-2, 0), (17, -4), (38, -10), (104, 3), (56, -5), (91, -19),
        (-6, -10), (14, -2), (23, -2), (21, 15), (47, 6), (44, 4), (45, 9), (47, -29),
    ],
    [ // P
        (1, -1), (-15, -7), (-5, 17), (0, -17), (-7, 0), (16, -21), (-6, 7), (-13, 0),
        (-12, 0), (5, 6), (-2, 2), (-26, -13), (-1, -3), (28, 0), (32, 0), (-11, -1),
        (-10, -9), (0, 4), (0, -2), (-10, 7), (2, 0), (-2, -5), (12, -2), (-8, -17),
        (-6, 6), (0, 11), (2, 3), (24, 0), (18, 0), (-10, -1), (-8, 6), (-19, -5),
        (9, 23), (20, 22), (10, 13), (29, 15), (23, 3), (11, 14), (11, 11), (1, 13),
        (43, 48), (49, 49), (32, 32), (68, 31), (58, 18), (48, 33), (50, 38), (35, 19),
        (62, 68), (50, 51), (69, 64), (99, 64), (89, 45), (65, 51), (65, 40), (38, 56),
        (-8, 1), (-1, 0), (-5, -6), (12, -5), (-4, 11), (4, -3), (3, -3), (0, -7),
    ],
    [ // K
        (-47, -51), (19, -39), (23, -26), (-48, -29), (-2, -32), (-53, -28), (23, -38), (-29, -52),
        (-44, -34), (-17, -31), (-25, -13), (-40, -12), (-28, 1), (-12, 0), (4, -17), (-20, -17),
        (-50, -41), (-30, -7), (-17, 1), (-23, 13), (-19, 22), (-17, 12), (-15, 0), (-51, -30),
        (-44, -23), (-4, -8), (-12, 32), (2, 34), (-2, 29), (0, 22), (-4, 3), (-50, -16),
        (-23, -28), (18, 12), (32, 18), (14, 31), (13, 29), (18, 29), (23, 11), (-15, -26),
        (-12, -21), (31, -9), (29, 13), (14, 29), (21, 34), (44, 13), (35, -5), (0, -9),
        (-15, -15), (26, -12), (38, 9), (12, 9), (24, 1), (28, 0), (50, -12), (6, -22),
        (-37, -33), (-11, -43), (-22, -23), (-42, -16), (-20, -15), (-15, 9), (31, -35), (0, -36),
    ],
]);

#[cfg(test)]
mod tests {

    use super::*;
    use fiddler_base::{game::Game, movegen::ALL};

    fn delta_helper(fen: &str) {
        let mut g = Game::from_fen(fen).unwrap();
        let orig_eval = pst_evaluate(g.board());
        for (m, _) in g.get_moves::<ALL>() {
            let new_eval = match g.board().player {
                Color::White => orig_eval + pst_delta(g.board(), m),
                Color::Black => orig_eval - pst_delta(g.board(), m),
            };
            g.make_move(m, ());
            // println!("{g}");
            assert_eq!(new_eval, pst_evaluate(g.board()));
            g.undo().unwrap();
        }
    }

    #[test]
    /// Test that adding deltas matches the same result as taking the PST value
    /// from scratch.
    fn pst_delta_equals_base_result() {
        delta_helper("r1bq1b1r/ppp2kpp/2n5/3np3/2B5/8/PPPP1PPP/RNBQK2R w KQ - 0 7");
    }

    #[test]
    fn delta_captures() {
        delta_helper("r1bq1b1r/ppp2kpp/2n5/3n4/2BPp3/2P5/PP3PPP/RNBQK2R b KQ d3 0 8");
    }

    #[test]
    fn delta_promotion() {
        delta_helper("r4bkr/pPpq2pp/2n1b3/3n4/2BPp3/2P5/1P3PPP/RNBQK2R w KQ - 1 13");
    }
}
