/*
  Fiddler, a UCI-compatible chess engine.
  Copyright (C) 2022 The Fiddler Authors (see AUTHORS.md file)

  Fiddler is free software: you can redistribute it and/or modify
  it under the terms of the GNU General Public License as published by
  the Free Software Foundation, either version 3 of the License, or
  (at your option) any later version.

  Fiddler is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details.

  You should have received a copy of the GNU General Public License
  along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/

//! Piece-Square Tables (PSTs).
//!
//! A PST is a table with an item for each piece at each square. It grants a
//! fixed value to the evaluation of a position for each piece, granting
//! benefits for being on "good" squares and penalties for pieces on "bad" ones.
//! For instance, a knight is much more valuable near the center, so the PST
//! value for a knight on rank 4 and file 3 is positive.

use std::{intrinsics::transmute, mem::MaybeUninit};

use fiddler_base::{Board, Color, Move, Piece, Square};

use crate::evaluate::Score;

/// A lookup table for piece values. The outer index is the type of the piece
/// (in order of Pawn, Knight, Bishop, Rook, Queen, and King)
/// and the inner index is the square of the piece (from White's point of view)
/// , starting with A1 as the first index, then continuing on to B1, C1, and so
/// on until H8 as index 63.
type Pst = [[Score; 64]; Piece::NUM_TYPES];

/// A PST which is given in millipawns.
type CentiPst = [[(i16, i16); 64]; Piece::NUM_TYPES];

#[must_use]
/// Evaluate a board based on its PST value. This is slow, so under most
/// conditions it is recommended to use `value_delta()` instead if you are making
/// moves. The first value in the return type is the midgame difference, and
/// the second is the endgame difference.
pub fn evaluate(board: &Board) -> Score {
    let mut score = Score::DRAW;

    for pt in Piece::ALL_TYPES {
        for sq in board[pt] & board[Color::White] {
            score += PST[pt as usize][sq as usize];
        }
        for sq in board[pt] & board[Color::Black] {
            //Invert the square that Black is on, since positional values are
            //flipped (as pawns move the other way, etc)
            let alt_sq = sq.opposite();
            score -= PST[pt as usize][alt_sq as usize];
        }
    }

    score
}

#[must_use]
/// Get the difference in PST value which would be generated by making the move
/// `m` on `board`. The first value in the return tuple is the midgame
/// difference, and the second is the endgame difference. `pst_delta` will
/// reflect how the position improves for the player making the move,
/// independed of if the player is white or black.
///
/// # Panics
///
/// This function will panic if the given move is invalid.
pub fn delta(board: &Board, m: Move) -> Score {
    let from_sq = m.from_square();
    let to_sq = m.to_square();
    let mover_type = board.type_at_square(m.from_square()).unwrap();
    let mover_idx = mover_type as usize;
    let end_type = match m.promote_type() {
        Some(pt) => pt,
        None => mover_type,
    };
    let end_idx = end_type as usize;
    let (from_alt, to_alt) = match board.player {
        Color::White => (from_sq, to_sq),
        Color::Black => (from_sq.opposite(), to_sq.opposite()),
    };
    let (from_idx, to_idx) = (from_alt as usize, to_alt as usize);

    // you always lose the value of the square you moved from
    let mut delta = PST[end_idx][to_idx] - PST[mover_idx][from_idx];

    if board[!board.player].contains(m.to_square()) {
        // conventional capture
        let to_opposite_idx = to_alt.opposite() as usize;
        let capturee_idx = board.type_at_square(to_sq).unwrap() as usize;
        delta += PST[capturee_idx][to_opposite_idx];
    }

    if m.is_en_passant() {
        let to_opposite_idx = (to_alt - Color::White.pawn_direction()).opposite() as usize;
        delta += PST[Piece::Pawn as usize][to_opposite_idx];
    }

    if m.is_castle() {
        let is_queen_castle = to_sq.file() == 2;
        let (rook_from_idx, rook_to_idx) = if is_queen_castle {
            (Square::A1 as usize, Square::D1 as usize)
        } else {
            (Square::H1 as usize, Square::F1 as usize)
        };

        delta += PST[Piece::Rook as usize][rook_to_idx] - PST[Piece::Rook as usize][rook_from_idx];
    }

    delta
}

/// A function used for ergonomics to convert from a table of millipawn values
/// to a table of `Eval`s.
const fn expand_table(centi_table: &CentiPst) -> Pst {
    // we will overwrite the whole table later
    let mut table = [[unsafe { MaybeUninit::uninit().assume_init() }; 64]; Piece::NUM_TYPES];
    let mut piece_idx = 0;
    // I would use for-loops here, but those are unsupported in const fns.
    while piece_idx < Piece::NUM_TYPES {
        let mut sq_idx = 0;
        while sq_idx < 64 {
            let int_score = centi_table[piece_idx][sq_idx];
            table[piece_idx][sq_idx] =
                MaybeUninit::new(Score::centipawns(int_score.0, int_score.1));
            sq_idx += 1;
        }
        piece_idx += 1;
    }
    unsafe { transmute(table) }
}

#[rustfmt::skip] // rustfmt likes to throw a million newlines in this
/// The main piece-square table. Evaluations are paired together as (midgame, 
/// endgame) to improve cache-friendliness. The indexing order of this table 
/// has its primary index as pieces, the secondary index as squares, and the 
/// innermost index as 0 for midgame and 1 for endgame.
pub const PST: Pst = expand_table(&[
    [ // N
        (-178, -52), (-21, -21), (-65, -21), (-47, -21), (-44, -28), (-42, -22), (-21, -22), (-91, -38),
        (-98, -14), (-69, -7), (-17, 0), (2, 3), (2, -1), (-26, 0), (-39, -5), (-48, -43),
        (-26, -38), (-8, 15), (32, 8), (10, 10), (17, 1), (36, 25), (12, -1), (-33, -26),
        (-9, -34), (-17, 7), (8, 14), (18, 20), (27, 0), (6, 1), (7, 2), (-9, -20),
        (-1, -20), (13, 3), (39, 13), (60, 25), (42, 20), (73, 25), (20, 9), (35, -21),
        (0, -15), (29, 8), (5, 12), (77, -5), (58, 0), (-5, 4), (47, -12), (27, -14),
        (-26, -34), (-22, -27), (70, -17), (-10, 4), (34, -6), (31, -9), (-4, -17), (-2, -38),
        (-87, -43), (-53, -56), (-42, -20), (-26, -20), (-15, -20), (-86, -15), (-50, -41), (-103, -36),
    ],
    [ // B
        (-66, -13), (-22, -4), (-16, -19), (-49, -20), (-49, -1), (-13, -16), (-31, -19), (-57, -1),
        (-30, -3), (2, -4), (-2, -10), (-1, -6), (8, 0), (-12, 5), (28, 2), (-25, -1),
        (-2, 0), (3, 16), (10, 10), (30, 9), (30, 5), (3, 21), (7, 14), (-14, -6),
        (-16, -6), (-10, -7), (31, 17), (20, 6), (8, -1), (22, -2), (-10, -9), (-4, -7),
        (-3, -2), (18, -1), (9, 15), (29, 9), (31, 7), (18, 6), (6, 14), (11, -11),
        (-19, -5), (14, -7), (-48, -4), (27, 6), (2, -5), (-73, 0), (36, -3), (21, -7),
        (-29, 9), (-5, 8), (-5, 0), (-105, 2), (-80, 2), (-8, 4), (-24, 0), (-14, -18), 
        (-24, -6), (-34, 1), (-53, 0), (-52, 0), (-28, -20), (-100, 0), (-35, -14), (-9, -22),
    ],
    [ // R
        (-13, 6), (-9, 7), (-4, 0), (1, 0), (-1, -5), (7, -4), (-20, 0), (-40, 0),
        (-45, -12), (-36, 3), (-20, -8), (-18, -6), (-17, 2), (-11, -10), (-14, 6), (-32, 8),
        (-36, 4), (-30, 5), (-15, -4), (-13, -16), (-25, -2), (-28, -6), (-1, -5), (-23, -3),
        (-22, -6), (-11, 3), (-5, -1), (-17, -5), (-22, -6), (-29, -4), (-15, 0), (-22, -14),
        (-8, -2), (-17, 0), (6, 15), (5, 1), (0, -3), (1, 2), (-13, -8), (-6, -9),
        (2, -6), (10, 6), (8, -1), (17, 4), (4, -4), (32, -21), (21, -5), (10, -3),
        (8, 5), (22, 9), (42, 9), (37, 8), (39, 1), (40, 0), (46, 11), (35, -3),
        (0, 2), (23, 0), (15, -12), (2, -9), (11, 1), (-11, 4), (14, -3), (17, 4),
    ],
    [ // Q
        (-26, -8), (-46, -7), (-49, 6), (24, 3), (-29, 0), (-64, -3), (-19, 2), (-21, -7),
        (-105, -5), (-55, 3), (1, 14), (0, -2), (0, -4), (2, -7), (-7, 0), (1, -7),
        (-39, -5), (-5, -1), (3, 12), (-5, 4), (5, 10), (16, 9), (0, 1), (3, 3),
        (-10, 1), (-19, 16), (-5, 0), (13, 6), (6, 9), (-5, 8), (5, -4), (0, 2),
        (-24, -8), (-18, 3), (-1, 0), (24, -3), (31, -2), (34, 2), (18, -4), (38, 2),
        (-14, -5), (-14, -2), (19, 0), (38, 4), (66, 3), (88, 14), (118, -5), (71, -19),
        (-28, -1), (-26, -6), (0, 1), (20, 0), (33, -6), (101, 2), (60, -5), (91, -15),
        (-10, -10), (11, 0), (24, -2), (17, 15), (42, 6), (41, 0), (47, 9), (51, -25),
    ],
    [ // P
        (4, 2), (-18, -8), (0, 15), (1, -16), (-9, -1), (19, -20), (-1, 8), (-11, 4),
        (-13, 1), (2, 7), (-7, -1), (-29, -12), (-4, -6), (28, -3), (29, -1), (-12, -2),
        (-10, -12), (-3, 5), (-1, -7), (-11, 5), (1, -1), (0, -8), (9, -3), (-8, -17),
        (-6, 8), (0, 13), (0, 5), (20, -1), (18, -1), (-8, -5), (-5, 6), (-20, -8),
        (6, 30), (21, 25), (6, 13), (27, 10), (20, 2), (8, 14), (12, 12), (-1, 15),
        (45, 56), (54, 54), (34, 35), (69, 38), (61, 23), (53, 33), (47, 45), (32, 28),
        (58, 75), (47, 57), (73, 69), (95, 68), (92, 50), (69, 51), (61, 39), (39, 59),
        (-3, 1), (-1, 0), (-3, -3), (9, -7), (-8, 12), (2, -5), (1, -1), (1, -11),
    ],
    [ // K
        (-50, -47), (15, -41), (17, -28), (-46, -26), (-7, -31), (-48, -26), (18, -40), (-33, -58),
        (-45, -32), (-20, -29), (-20, -16), (-38, -14), (-29, 0), (-7, 0), (4, -15), (-16, -19),
        (-47, -43), (-24, -11), (-19, 3), (-19, 10), (-13, 22), (-15, 14), (-14, 1), (-52, -32),
        (-48, -20), (0, -6), (-10, 29), (3, 34), (0, 23), (0, 18), (0, 3), (-49, -16),
        (-23, -31), (18, 13), (28, 16), (18, 35), (9, 28), (19, 25), (19, 13), (-19, -27),
        (-9, -21), (26, -8), (32, 9), (17, 28), (18, 31), (40, 10), (34, -6), (-3, -3),
        (-10, -11), (26, -9), (33, 6), (15, 12), (22, 0), (28, 5), (51, -11), (9, -24),
        (-34, -31), (-7, -45), (-25, -20), (-38, -13), (-19, -12), (-11, 5), (26, -38), (0, -37),
    ],
]);

#[cfg(test)]
mod tests {

    use super::*;
    use fiddler_base::{game::Game, movegen::ALL};

    fn delta_helper(fen: &str) {
        let mut g = Game::from_fen(fen).unwrap();
        let orig_eval = evaluate(g.board());
        for (m, _) in g.get_moves::<ALL>() {
            let new_eval = match g.board().player {
                Color::White => orig_eval + delta(g.board(), m),
                Color::Black => orig_eval - delta(g.board(), m),
            };
            g.make_move(m, &());
            // println!("{g}");
            assert_eq!(new_eval, evaluate(g.board()));
            g.undo().unwrap();
        }
    }

    #[test]
    /// Test that adding deltas matches the same result as taking the PST value
    /// from scratch.
    fn pst_delta_equals_base_result() {
        delta_helper("r1bq1b1r/ppp2kpp/2n5/3np3/2B5/8/PPPP1PPP/RNBQK2R w KQ - 0 7");
    }

    #[test]
    fn delta_captures() {
        delta_helper("r1bq1b1r/ppp2kpp/2n5/3n4/2BPp3/2P5/PP3PPP/RNBQK2R b KQ d3 0 8");
    }

    #[test]
    fn delta_promotion() {
        delta_helper("r4bkr/pPpq2pp/2n1b3/3n4/2BPp3/2P5/1P3PPP/RNBQK2R w KQ - 1 13");
    }
}
