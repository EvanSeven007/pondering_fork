//! A module containing the information for Piece-Square Tables (PSTs). A PST
//! is given for both the early and endgame.

use fiddler_base::{
    movegen::NominateMove, Board, Color, Eval, Move, Piece, Position, Score, Square,
};

use crate::evaluate::blend_eval;

/// A lookup table for piece values. The outer index is the type of the piece
/// (in order of Pawn, Knight, Bishop, Rook, Queen, and King)
/// and the inner index is the square of the piece (from White's point of view)
/// , starting with A1 as the first index, then continuing on to B1, C1, and so
/// on until H8 as index 63.
type Pst = [[Score; 64]; Piece::NUM_TYPES];

/// A PST which is given in millipawns.
type CentiPst = [[(i16, i16); 64]; Piece::NUM_TYPES];

/// Evaluate a board based on its PST value. This is slow, so under most
/// conditions it is recommended to use `pst_delta()` instead if you are making
/// moves. The first value in the return type is the midgame difference, and
/// the second is the endgame difference.
pub fn pst_evaluate(board: &Board) -> Score {
    let mut score = (Eval::DRAW, Eval::DRAW);

    for pt in Piece::ALL_TYPES {
        for sq in board[pt] & board[Color::White] {
            score.0 += PST[pt as usize][sq as usize].0;
            score.1 += PST[pt as usize][sq as usize].1;
        }
        for sq in board[pt] & board[Color::Black] {
            //Invert the square that Black is on, since positional values are
            //flipped (as pawns move the other way, etc)
            let alt_sq = sq.opposite();

            score.0 -= PST[pt as usize][alt_sq as usize].0;
            score.1 -= PST[pt as usize][alt_sq as usize].1;
        }
    }

    score
}

/// Get the difference in PST value which would be generated by making the move
/// `m` on `board`. The first value in the return tuple is the midgame
/// difference, and the second is the endgame difference. `pst_delta` will
/// reflect how the position improves for the player making the move,
/// independed of if the player is white or black.
///
/// # Panics
///
/// `pst_delta` will panic if the given move is invalid.
pub fn pst_delta(board: &Board, m: Move) -> Score {
    let from_sq = m.from_square();
    let to_sq = m.to_square();
    let mover_type = board.type_at_square(m.from_square()).unwrap();
    let mover_idx = mover_type as usize;
    let end_type = match m.promote_type() {
        Some(pt) => pt,
        None => mover_type,
    };
    let end_idx = end_type as usize;
    let (from_alt, to_alt) = match board.player_to_move {
        Color::White => (from_sq, to_sq),
        Color::Black => (from_sq.opposite(), to_sq.opposite()),
    };
    let (from_idx, to_idx) = (from_alt as usize, to_alt as usize);

    // you always lose the value of the square you moved from
    let mut delta = (
        PST[end_idx][to_idx].0 - PST[mover_idx][from_idx].0,
        PST[end_idx][to_idx].1 - PST[mover_idx][from_idx].1,
    );

    if board[!board.player_to_move].contains(m.to_square()) {
        // conventional capture
        let to_opposite_idx = to_alt.opposite() as usize;
        let capturee_idx = board.type_at_square(to_sq).unwrap() as usize;
        delta.0 += PST[capturee_idx][to_opposite_idx].0;
        delta.1 += PST[capturee_idx][to_opposite_idx].1;
    }

    if m.is_en_passant() {
        let to_opposite_idx = (to_alt - Color::White.pawn_direction()).opposite() as usize;
        delta.0 += PST[Piece::Pawn as usize][to_opposite_idx].0;
        delta.1 += PST[Piece::Pawn as usize][to_opposite_idx].1;
    }

    if m.is_castle() {
        let is_queen_castle = to_sq.file() == 2;
        let (rook_from_idx, rook_to_idx) = match is_queen_castle {
            true => (Square::A1 as usize, Square::D1 as usize),
            false => (Square::H1 as usize, Square::F1 as usize),
        };

        delta.0 +=
            PST[Piece::Rook as usize][rook_to_idx].0 - PST[Piece::Rook as usize][rook_from_idx].0;
        delta.1 +=
            PST[Piece::Rook as usize][rook_to_idx].1 - PST[Piece::Rook as usize][rook_from_idx].1;
    }

    delta
}

pub struct PstNominate {}

impl NominateMove for PstNominate {
    type Output = (Score, Eval);

    #[inline(always)]
    fn score(m: Move, pos: &Position) -> Self::Output {
        let delta = pst_delta(&pos.board, m);
        (delta, blend_eval(&pos.board, delta.0, delta.1))
    }
}

/// A function used for ergonomics to convert from a table of millipawn values
/// to a table of `Eval`s.
const fn expand_table(centi_table: CentiPst) -> Pst {
    let mut table = [[(Eval::DRAW, Eval::DRAW); 64]; Piece::NUM_TYPES];
    let mut piece_idx = 0;
    // I would use for-loops here, but those are unsupported in const fns.
    while piece_idx < Piece::NUM_TYPES {
        let mut sq_idx = 0;
        while sq_idx < 64 {
            let int_score = centi_table[piece_idx][sq_idx];
            table[piece_idx][sq_idx] =
                (Eval::centipawns(int_score.0), Eval::centipawns(int_score.1));
            sq_idx += 1;
        }
        piece_idx += 1;
    }
    table
}

#[rustfmt::skip] // rustfmt likes to throw a million newlines in this
/// The main piece-square table. Evaluations are paired together as (midgame, 
/// endgame) to improve cache-friendliness. The indexing order of this table 
/// has its primary index as pieces, the secondary index as squares, and the 
/// innermost index as 0 for midgame and 1 for endgame.
pub const PST: Pst = expand_table([
    [ // N
        (-157, -54), (-34, -28), (-70, -23), (-54, -20), (-48, -33), (-54, -28), (-37, -29), (-78, -33),
        (-92, -28), (-60, -8), (-19, 2), (-3, 4), (-9, 4), (-24, -2), (-40, -10), (-42, -37),
        (-47, -24), (-7, 12), (35, 5), (11, 4), (13, 5), (38, 20), (6, 0), (-47, -35),
        (-16, -27), (-18, 5), (18, 24), (11, 18), (17, 10), (9, 15), (0, 0), (-13, -26),
        (0, -25), (17, 3), (40, 10), (61, 24), (42, 19), (72, 21), (13, -5), (29, -31),
        (-11, -29), (36, 2), (-10, 7), (72, 6), (59, 6), (-13, 0), (49, -8), (24, -23),
        (-32, -40), (-16, -30), (69, -4), (-14, -1), (31, 1), (33, -6), (-2, -18), (-11, -35),
        (-87, -46), (-55, -44), (-48, -21), (-38, -27), (-22, -28), (-69, -29), (-41, -31), (-98, -38),
    ],
    [ // B
        (-58, -26), (-18, 2), (-7, -15), (-57, -5), (-58, -5), (-13, -12), (-36, -6), (-57, -14),
        (-24, -1), (5, 0), (2, -6), (-8, -3), (0, 4), (-24, -1), (24, 12), (-22, -6),
        (-3, -10), (6, 7), (-3, 11), (35, 2), (29, -4), (-11, 15), (12, 19), (-14, 0),
        (-19, -8), (-14, -4), (29, 13), (8, 10), (3, 9), (23, 8), (-12, -3), (-6, -5),
        (4, -8), (13, 0), (16, 11), (27, 3), (25, 15), (20, 9), (8, 7), (10, -14),
        (-8, -3), (12, 4), (-54, -1), (25, 13), (4, 0), (-79, -5), (45, -4), (27, -5),
        (-37, -1), (-5, 9), (-1, 0), (-106, 4), (-82, -2), (-10, -3), (-27, 1), (1, -12),
        (-30, -8), (-32, 2), (-37, -1), (-45, 0), (-24, -13), (-86, -2), (-33, -13), (-10, -22),
    ],
    [ // R
        (-38, 12), (-20, 5), (-5, -2), (5, 2), (-2, 4), (-5, -7), (1, -6), (-50, 6),
        (-42, -6), (-29, 5), (-22, -6), (-23, -4), (-26, 3), (-21, 0), (-13, 8), (-25, -6),
        (-30, 0), (-8, 3), (-11, 1), (-18, -11), (-19, -9), (-16, -6), (0, 1), (-18, -9),
        (-3, 4), (-7, 5), (-1, -2), (-5, -1), (-7, -5), (-9, 2), (-12, 2), (-11, -14),
        (3, 3), (-1, 3), (17, 9), (12, 1), (12, 1), (14, 0), (11, -10), (10, -2),
        (13, -5), (23, -1), (28, -3), (33, -6), (21, -8), (33, -12), (36, -5), (29, -8),
        (24, 3), (35, 6), (49, 2), (52, 6), (50, 14), (55, 0), (50, 12), (44, 5),
        (-6, -8), (21, 4), (20, -11), (7, -11), (6, -3), (-17, -2), (16, -2), (28, 5),
    ],
    [ // Q
        (-38, -7), (-56, -7), (-50, -1), (12, -2), (-36, -6), (-59, -7), (-11, -6), (-28, -19),
        (-104, -10), (-64, 0), (-5, 11), (-3, -3), (-8, -4), (-8, 0), (-9, 0), (-3, -5),
        (-45, -8), (-1, 2), (-5, 1), (-3, 4), (-6, 7), (10, -1), (0, 2), (-9, 3),
        (-7, -9), (-22, 5), (-3, 6), (28, 8), (11, 9), (0, -2), (6, 0), (8, 13),
        (-18, -2), (-8, -3), (5, 4), (31, 5), (33, -6), (37, -2), (21, -5), (48, 0),
        (-21, -12), (0, 3), (23, 4), (41, 3), (65, 7), (95, 18), (118, -3), (78, -11),
        (-31, -13), (-17, 0), (6, 3), (20, -8), (34, -11), (110, 3), (70, -4), (95, -20),
        (-9, -19), (6, -11), (19, -9), (6, -2), (45, -4), (39, -2), (32, -3), (45, -19),
    ],
    [ // P
        (-1, -3), (-6, -12), (-1, 0), (-3, -9), (-3, -6), (14, -15), (-2, 4), (-5, -1),
        (-5, 6), (13, 9), (-4, 9), (-41, -13), (-1, -15), (30, 15), (33, 6), (-4, 8),
        (-12, 13), (-7, -6), (-1, 0), (-11, 6), (3, 0), (-14, -9), (6, -10), (-12, 12),
        (-11, 1), (-1, -5), (8, 3), (30, 12), (25, 10), (-6, -7), (-10, 5), (-18, -3),
        (12, 2), (14, 5), (14, 14), (22, 25), (28, 25), (17, 10), (11, 0), (9, 6),
        (43, 13), (53, 15), (30, 16), (57, 16), (51, 30), (47, 25), (57, 20), (46, 11),
        (69, 55), (62, 33), (73, 54), (102, 50), (90, 40), (80, 49), (68, 39), (48, 53),
        (4, 1), (-2, 2), (3, -4), (16, 3), (-7, -2), (-4, 3), (8, 3), (10, -7),
    ],
    [ // K
        (-49, -44), (19, -34), (22, -26), (-64, -21), (-9, -37), (-63, -31), (35, -28), (-32, -48),
        (-48, -28), (-23, -27), (-32, -6), (-36, -2), (-35, 2), (-20, -3), (-9, -18), (-32, -25),
        (-53, -39), (-37, -7), (-26, 14), (-26, 27), (-19, 38), (-24, 15), (-28, -14), (-58, -27),
        (-37, -34), (-17, -2), (-6, 35), (0, 43), (-3, 48), (-9, 24), (-23, -3), (-50, -19),
        (-24, -27), (5, 0), (20, 14), (16, 42), (18, 33), (17, 34), (11, -3), (-20, -28),
        (-24, -21), (23, -12), (22, 18), (18, 34), (14, 32), (35, 7), (34, -4), (-2, -20),
        (-23, -26), (9, -19), (21, -4), (6, 2), (11, 6), (14, -13), (29, -16), (12, -19),
        (-28, -54), (-29, -48), (-22, -27), (-42, -17), (-35, -29), (-17, 0), (20, -47), (-12, -40),
    ],
]);

#[cfg(test)]
mod tests {

    use super::*;
    use fiddler_base::movegen::{get_moves, NoopNominator};
    use fiddler_base::Position;

    #[test]
    /// Test that adding deltas matches the same result as taking the PST value
    /// from scratch.
    fn test_pst_delta_equals_base_result() {
        let pos = Position::from_fen(
            "r1bq1b1r/ppp2kpp/2n5/3np3/2B5/8/PPPP1PPP/RNBQK2R w KQ - 0 7",
            Position::no_eval,
        )
        .unwrap();
        let pst_original = pst_evaluate(&pos.board);

        for m in get_moves::<NoopNominator>(&pos) {
            let delta = pst_delta(&pos.board, m.0);
            let delta_eval = (pst_original.0 + delta.0, pst_original.1 + delta.1);
            let mut bcopy = pos.board;
            bcopy.make_move(m.0);
            assert_eq!(delta_eval, pst_evaluate(&bcopy));
        }
    }
}
