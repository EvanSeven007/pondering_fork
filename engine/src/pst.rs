//! A module containing the information for Piece-Square Tables (PSTs). A PST
//! is given for both the early and endgame.

use fiddler_base::{Board, Color, Eval, Move, Piece, Score, Square};

/// A lookup table for piece values. The outer index is the type of the piece
/// (in order of Pawn, Knight, Bishop, Rook, Queen, and King)
/// and the inner index is the square of the piece (from White's point of view)
/// , starting with A1 as the first index, then continuing on to B1, C1, and so
/// on until H8 as index 63.
type Pst = [[Score; 64]; Piece::NUM_TYPES];

/// A PST which is given in millipawns.
type CentiPst = [[(i16, i16); 64]; Piece::NUM_TYPES];

/// Evaluate a board based on its PST value. This is slow, so under most
/// conditions it is recommended to use `pst_delta()` instead if you are making
/// moves. The first value in the return type is the midgame difference, and
/// the second is the endgame difference.
pub fn pst_evaluate(board: &Board) -> Score {
    let mut score = (Eval::DRAW, Eval::DRAW);

    for pt in Piece::ALL_TYPES {
        for sq in board[pt] & board[Color::White] {
            score.0 += PST[pt as usize][sq as usize].0;
            score.1 += PST[pt as usize][sq as usize].1;
        }
        for sq in board[pt] & board[Color::Black] {
            //Invert the square that Black is on, since positional values are
            //flipped (as pawns move the other way, etc)
            let alt_sq = sq.opposite();

            score.0 -= PST[pt as usize][alt_sq as usize].0;
            score.1 -= PST[pt as usize][alt_sq as usize].1;
        }
    }

    score
}

/// Get the difference in PST value which would be generated by making the move
/// `m` on `board`. The first value in the return tuple is the midgame
/// difference, and the second is the endgame difference. `pst_delta` will
/// reflect how the position improves for the player making the move,
/// independed of if the player is white or black.
///
/// # Panics
///
/// `pst_delta` will panic if the given move is invalid.
pub fn pst_delta(board: &Board, m: Move) -> Score {
    let from_sq = m.from_square();
    let to_sq = m.to_square();
    let mover_type = board.type_at_square(m.from_square()).unwrap();
    let mover_idx = mover_type as usize;
    let end_type = match m.promote_type() {
        Some(pt) => pt,
        None => mover_type,
    };
    let end_idx = end_type as usize;
    let (from_alt, to_alt) = match board.player_to_move {
        Color::White => (from_sq, to_sq),
        Color::Black => (from_sq.opposite(), to_sq.opposite()),
    };
    let (from_idx, to_idx) = (from_alt as usize, to_alt as usize);

    // you always lose the value of the square you moved from
    let mut delta = (
        PST[end_idx][to_idx].0 - PST[mover_idx][from_idx].0,
        PST[end_idx][to_idx].1 - PST[mover_idx][from_idx].1,
    );

    if board[!board.player_to_move].contains(m.to_square()) {
        // conventional capture
        let to_opposite_idx = to_alt.opposite() as usize;
        let capturee_idx = board.type_at_square(to_sq).unwrap() as usize;
        delta.0 += PST[capturee_idx][to_opposite_idx].0;
        delta.1 += PST[capturee_idx][to_opposite_idx].1;
    }

    if m.is_en_passant() {
        let to_opposite_idx = (to_alt - Color::White.pawn_direction()).opposite() as usize;
        delta.0 += PST[Piece::Pawn as usize][to_opposite_idx].0;
        delta.1 += PST[Piece::Pawn as usize][to_opposite_idx].1;
    }

    if m.is_castle() {
        let is_queen_castle = to_sq.file() == 2;
        let (rook_from_idx, rook_to_idx) = match is_queen_castle {
            true => (Square::A1 as usize, Square::D1 as usize),
            false => (Square::H1 as usize, Square::F1 as usize),
        };

        delta.0 +=
            PST[Piece::Rook as usize][rook_to_idx].0 - PST[Piece::Rook as usize][rook_from_idx].0;
        delta.1 +=
            PST[Piece::Rook as usize][rook_to_idx].1 - PST[Piece::Rook as usize][rook_from_idx].1;
    }

    delta
}

/// A function used for ergonomics to convert from a table of millipawn values
/// to a table of `Eval`s.
const fn expand_table(centi_table: CentiPst) -> Pst {
    let mut table = [[(Eval::DRAW, Eval::DRAW); 64]; Piece::NUM_TYPES];
    let mut piece_idx = 0;
    // I would use for-loops here, but those are unsupported in const fns.
    while piece_idx < Piece::NUM_TYPES {
        let mut sq_idx = 0;
        while sq_idx < 64 {
            let int_score = centi_table[piece_idx][sq_idx];
            table[piece_idx][sq_idx] =
                (Eval::centipawns(int_score.0), Eval::centipawns(int_score.1));
            sq_idx += 1;
        }
        piece_idx += 1;
    }
    table
}

#[rustfmt::skip] // rustfmt likes to throw a million newlines in this
/// The main piece-square table. Evaluations are paired together as (midgame, 
/// endgame) to improve cache-friendliness. The indexing order of this table 
/// has its primary index as pieces, the secondary index as squares, and the 
/// innermost index as 0 for midgame and 1 for endgame.
pub const PST: Pst = expand_table([
    [ // N
        (-170, -52), (-34, -22), (-72, -21), (-54, -22), (-47, -33), (-51, -28), (-36, -22), (-92, -33),
        (-93, -19), (-64, -7), (-18, -1), (-4, 3), (-9, 2), (-22, 2), (-37, -5), (-41, -35),
        (-47, -27), (-9, 13), (33, -2), (11, 2), (15, 4), (37, 18), (7, 1), (-46, -26),
        (-18, -34), (-19, 3), (17, 24), (10, 20), (16, 9), (9, 10), (0, 3), (-14, -25),
        (0, -30), (16, 0), (39, 8), (59, 26), (41, 17), (74, 20), (12, 0), (30, -28),
        (-14, -23), (34, 6), (-11, 7), (70, -2), (58, 6), (-14, 4), (47, -9), (24, -25),
        (-36, -38), (-17, -34), (68, -5), (-16, 2), (30, -3), (32, -10), (-4, -20), (-6, -31),
        (-89, -43), (-61, -51), (-50, -21), (-45, -23), (-19, -24), (-91, -34), (-40, -39), (-105, -31),
    ],
    [ // B
        (-56, -17), (-18, 1), (-7, -13), (-56, -8), (-59, -4), (-11, -16), (-37, -11), (-60, -6),
        (-26, -3), (4, -3), (2, -7), (-9, 1), (-1, 4), (-24, 6), (23, 11), (-21, -1),
        (-4, -3), (5, 12), (-2, 9), (34, 4), (29, -6), (-11, 20), (12, 20), (-14, 4),
        (-19, -2), (-14, -3), (28, 13), (7, 7), (2, 8), (22, 9), (-11, -6), (-7, -1),
        (3, -5), (12, -5), (16, 13), (25, 4), (23, 15), (18, 6), (6, 9), (6, -9),
        (-10, -10), (12, 9), (-55, 6), (25, 4), (1, -6), (-82, -4), (42, -3), (25, -6),
        (-38, 0), (-5, 10), (-2, 0), (-114, 4), (-89, -5), (-13, 0), (-35, 2), (-2, -14),
        (-30, -13), (-39, -3), (-50, 6), (-56, 3), (-25, -12), (-110, -3), (-39, -9), (-7, -17),
    ],
    [ // R
        (-23, 20), (-25, 8), (-18, -2), (-11, -3), (-20, 5), (1, -4), (-10, -6), (-45, 3),
        (-45, -13), (-38, 9), (-31, -3), (-33, 0), (-36, 0), (-27, 1), (-22, 11), (-31, 0),
        (-34, -2), (-20, 4), (-22, -3), (-29, -16), (-30, -2), (-24, 0), (-14, -1), (-28, -5),
        (-13, 2), (-19, 6), (-14, -4), (-20, -3), (-24, -3), (-23, 1), (-26, -2), (-24, -14),
        (-7, 1), (-13, 1), (3, 3), (-4, -2), (-7, 0), (0, 4), (-2, -16), (-5, -2),
        (4, -10), (12, 2), (15, 0), (15, -11), (4, -15), (24, -19), (28, -8), (17, -2),
        (13, 1), (22, 7), (35, 2), (36, -1), (33, 10), (42, 3), (40, 15), (32, 3),
        (-5, -9), (18, 4), (14, -5), (-1, -12), (-2, -7), (-23, -3), (13, -4), (21, 4),
    ],
    [ // Q
        (-36, -6), (-55, -8), (-48, 4), (10, -1), (-37, -9), (-59, -6), (-14, 0), (-26, -17),
        (-112, -4), (-64, -2), (-8, 14), (-7, -5), (-9, -6), (-10, -5), (-10, -3), (-6, -10),
        (-44, -12), (-3, -2), (-6, 3), (-5, 2), (-8, 10), (8, 0), (0, 5), (-10, 0),
        (-9, -7), (-24, 9), (-4, 0), (26, 7), (10, 13), (-1, -3), (5, 0), (7, 9),
        (-18, 1), (-9, -1), (4, 5), (29, 4), (31, -2), (36, -1), (20, -6), (45, 3),
        (-22, -12), (-1, 1), (22, 1), (39, 0), (62, 6), (94, 19), (116, -1), (73, -16),
        (-29, -12), (-17, -7), (5, -1), (19, -5), (35, -19), (109, 3), (66, 2), (94, -17),
        (-5, -18), (13, -6), (28, -6), (17, 5), (53, 0), (54, -7), (47, -4), (55, -25),
    ],
    [ // P
        (3, -1), (-6, -16), (-9, 6), (0, -13), (-4, -8), (16, -17), (-4, 0), (-7, 0),
        (-7, 7), (11, 2), (-6, 12), (-42, -10), (-2, -13), (29, 9), (32, 12), (-5, 8),
        (-11, 4), (-6, 2), (-2, -4), (-12, 4), (2, 5), (-13, -10), (6, -10), (-11, 8),
        (-10, -3), (0, -1), (8, -5), (31, 11), (25, 13), (-5, 0), (-9, 0), (-16, 0),
        (9, -2), (15, 12), (14, 5), (22, 26), (27, 23), (16, 10), (11, -5), (3, 12),
        (40, 11), (52, 14), (31, 17), (57, 20), (51, 24), (47, 22), (54, 20), (41, 4),
        (63, 59), (61, 32), (70, 55), (102, 54), (86, 41), (75, 50), (65, 43), (43, 47),
        (7, 0), (-3, 3), (-5, 0), (15, 0), (-10, -4), (-5, -4), (0, -3), (5, -5),
    ],
    [ // K
        (-44, -44), (18, -38), (15, -18), (-62, -22), (-10, -38), (-57, -32), (30, -33), (-29, -49),
        (-42, -26), (-19, -33), (-28, -5), (-34, -5), (-33, 3), (-16, -2), (-5, -15), (-29, -19),
        (-47, -39), (-30, -8), (-21, 8), (-22, 26), (-15, 44), (-18, 18), (-21, -15), (-51, -32),
        (-42, -26), (-12, -8), (-2, 37), (4, 45), (1, 41), (-3, 26), (-16, 0), (-45, -19),
        (-19, -25), (12, 0), (23, 15), (20, 45), (23, 31), (21, 33), (15, -2), (-20, -30),
        (-20, -22), (33, -16), (29, 14), (27, 32), (23, 35), (46, 6), (39, -3), (3, -17),
        (-19, -26), (29, -18), (34, 2), (17, -3), (23, 4), (28, -3), (43, -15), (18, -14),
        (-38, -46), (-19, -50), (-16, -27), (-41, -10), (-30, -21), (-17, 6), (31, -37), (-7, -38),
    ],
]);

#[cfg(test)]
mod tests {

    use super::*;
    use fiddler_base::movegen::{get_moves, NoopNominator, ALL};
    use fiddler_base::Position;

    #[test]
    /// Test that adding deltas matches the same result as taking the PST value
    /// from scratch.
    fn test_pst_delta_equals_base_result() {
        let pos = Position::from_fen(
            "r1bq1b1r/ppp2kpp/2n5/3np3/2B5/8/PPPP1PPP/RNBQK2R w KQ - 0 7",
            Position::no_eval,
        )
        .unwrap();
        let pst_original = pst_evaluate(&pos.board);

        for m in get_moves::<ALL, NoopNominator>(&pos) {
            let delta = pst_delta(&pos.board, m.0);
            let delta_eval = (pst_original.0 + delta.0, pst_original.1 + delta.1);
            let mut bcopy = pos.board;
            bcopy.make_move(m.0);
            assert_eq!(delta_eval, pst_evaluate(&bcopy));
        }
    }
}
