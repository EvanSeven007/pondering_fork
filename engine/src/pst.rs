/*
  Fiddler, a UCI-compatible chess engine.
  Copyright (C) 2022 The Fiddler Authors (see AUTHORS.md file)

  Fiddler is free software: you can redistribute it and/or modify
  it under the terms of the GNU General Public License as published by
  the Free Software Foundation, either version 3 of the License, or
  (at your option) any later version.

  Fiddler is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details.

  You should have received a copy of the GNU General Public License
  along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/

//! Piece-Square Tables (PSTs).
//!
//! A PST is a table with an item for each piece at each square. It grants a
//! fixed value to the evaluation of a position for each piece, granting
//! benefits for being on "good" squares and penalties for pieces on "bad" ones.
//! For instance, a knight is much more valuable near the center, so the PST
//! value for a knight on rank 4 and file 3 is positive.

use std::{intrinsics::transmute, mem::MaybeUninit};

use fiddler_base::{Board, Color, Move, Piece, Score, Square};

/// A lookup table for piece values. The outer index is the type of the piece
/// (in order of Pawn, Knight, Bishop, Rook, Queen, and King)
/// and the inner index is the square of the piece (from White's point of view)
/// , starting with A1 as the first index, then continuing on to B1, C1, and so
/// on until H8 as index 63.
type Pst = [[Score; 64]; Piece::NUM_TYPES];

/// A PST which is given in millipawns.
type CentiPst = [[(i16, i16); 64]; Piece::NUM_TYPES];

/// Evaluate a board based on its PST value. This is slow, so under most
/// conditions it is recommended to use `value_delta()` instead if you are making
/// moves. The first value in the return type is the midgame difference, and
/// the second is the endgame difference.
pub fn pst_evaluate(board: &Board) -> Score {
    let mut score = Score::DRAW;

    for pt in Piece::ALL_TYPES {
        for sq in board[pt] & board[Color::White] {
            score += PST[pt as usize][sq as usize];
        }
        for sq in board[pt] & board[Color::Black] {
            //Invert the square that Black is on, since positional values are
            //flipped (as pawns move the other way, etc)
            let alt_sq = sq.opposite();
            score -= PST[pt as usize][alt_sq as usize];
        }
    }

    score
}

/// Get the difference in PST value which would be generated by making the move
/// `m` on `board`. The first value in the return tuple is the midgame
/// difference, and the second is the endgame difference. `pst_delta` will
/// reflect how the position improves for the player making the move,
/// independed of if the player is white or black.
///
/// # Panics
///
/// `pst_delta` will panic if the given move is invalid.
pub fn pst_delta(board: &Board, m: Move) -> Score {
    let from_sq = m.from_square();
    let to_sq = m.to_square();
    let mover_type = board.type_at_square(m.from_square()).unwrap();
    let mover_idx = mover_type as usize;
    let end_type = match m.promote_type() {
        Some(pt) => pt,
        None => mover_type,
    };
    let end_idx = end_type as usize;
    let (from_alt, to_alt) = match board.player {
        Color::White => (from_sq, to_sq),
        Color::Black => (from_sq.opposite(), to_sq.opposite()),
    };
    let (from_idx, to_idx) = (from_alt as usize, to_alt as usize);

    // you always lose the value of the square you moved from
    let mut delta = PST[end_idx][to_idx] - PST[mover_idx][from_idx];

    if board[!board.player].contains(m.to_square()) {
        // conventional capture
        let to_opposite_idx = to_alt.opposite() as usize;
        let capturee_idx = board.type_at_square(to_sq).unwrap() as usize;
        delta += PST[capturee_idx][to_opposite_idx];
    }

    if m.is_en_passant() {
        let to_opposite_idx = (to_alt - Color::White.pawn_direction()).opposite() as usize;
        delta += PST[Piece::Pawn as usize][to_opposite_idx];
    }

    if m.is_castle() {
        let is_queen_castle = to_sq.file() == 2;
        let (rook_from_idx, rook_to_idx) = match is_queen_castle {
            true => (Square::A1 as usize, Square::D1 as usize),
            false => (Square::H1 as usize, Square::F1 as usize),
        };

        delta += PST[Piece::Rook as usize][rook_to_idx] - PST[Piece::Rook as usize][rook_from_idx];
    }

    delta
}

/// A function used for ergonomics to convert from a table of millipawn values
/// to a table of `Eval`s.
const fn expand_table(centi_table: CentiPst) -> Pst {
    // we will overwrite the whole table later
    let mut table = [[unsafe { MaybeUninit::uninit().assume_init() }; 64]; Piece::NUM_TYPES];
    let mut piece_idx = 0;
    // I would use for-loops here, but those are unsupported in const fns.
    while piece_idx < Piece::NUM_TYPES {
        let mut sq_idx = 0;
        while sq_idx < 64 {
            let int_score = centi_table[piece_idx][sq_idx];
            table[piece_idx][sq_idx] =
                MaybeUninit::new(Score::centipawns(int_score.0, int_score.1));
            sq_idx += 1;
        }
        piece_idx += 1;
    }
    unsafe { transmute(table) }
}

#[rustfmt::skip] // rustfmt likes to throw a million newlines in this
/// The main piece-square table. Evaluations are paired together as (midgame, 
/// endgame) to improve cache-friendliness. The indexing order of this table 
/// has its primary index as pieces, the secondary index as squares, and the 
/// innermost index as 0 for midgame and 1 for endgame.
pub const PST: Pst = expand_table([
    [ // N
        (-178, -51), (-31, -20), (-68, -22), (-54, -19), (-46, -35), (-47, -22), (-32, -20), (-95, -32),
        (-92, -17), (-65, -4), (-16, 0), (-1, 2), (-8, 0), (-26, 0), (-36, -6), (-45, -40),
        (-43, -27), (-6, 12), (37, 4), (16, 4), (12, 2), (40, 23), (9, 8), (-43, -22),
        (-16, -32), (-14, 6), (15, 27), (11, 23), (17, 4), (4, 6), (1, 2), (-8, -18), 
        (-5, -24), (14, 9), (41, 5), (60, 25), (44, 14), (75, 20), (16, 7), (33, -25),
        (-10, -19), (35, 8), (-15, 11), (71, -2), (55, 1), (-17, 1), (48, -9), (23, -19),
        (-33, -44), (-17, -29), (70, -11), (-9, 7), (37, 0), (38, -6), (-6, -17), (-10, -35),
        (-93, -41), (-55, -55), (-48, -17), (-35, -22), (-15, -20), (-91, -25), (-46, -34), (-104, -30),
    ],
    [ // B
        (-61, -16), (-16, 0), (-4, -12), (-59, -12), (-57, -1), (-9, -14), (-33, -11), (-57, 0),
        (-22, 0), (7, -5), (4, -4), (-6, 0), (2, 0), (-21, 9), (27, 13), (-22, 0),
        (-7, 2), (9, 15), (3, 16), (39, 8), (33, 2), (-8, 22), (15, 16), (-14, 6),
        (-20, -9), (-18, 3), (33, 17), (8, 6), (0, 2), (26, 5), (-12, -6), (-1, -1),
        (1, -6), (14, 2), (17, 16), (28, 9), (27, 9), (14, 2), (11, 8), (3, -8),
        (-17, -8), (12, 0), (-59, 0), (25, 8), (3, -4), (-90, -2), (47, 4), (28, -10),
        (-35, 2), (-10, 11), (-2, 0), (-114, 5), (-86, 1), (-15, 0), (-35, 3), (-7, -22),
        (-28, -12), (-41, -3), (-50, 4), (-51, 3), (-28, -15), (-105, -2), (-33, -11), (-10, -16),
    ],
    [ // R
        (-38, 14), (-20, 4), (-5, 0), (3, -4), (-4, 0), (-5, -4), (-7, -1), (-51, 2),
        (-50, -11), (-34, 5), (-25, -7), (-27, 1), (-29, -3), (-26, -7), (-17, 9), (-23, 5),
        (-35, 0), (-18, 1), (-20, -3), (-22, -20), (-31, 0), (-19, 2), (-3, -8), (-19, -7),
        (-16, 0), (-14, 4), (-7, -1), (-24, 0), (-25, -5), (-21, 0), (-22, 0), (-25, -11),
        (-8, 1), (-17, 1), (7, 10), (0, -4), (0, 1), (-2, 6), (-6, -18), (-4, 0),
        (2, -10), (12, -1), (10, 1), (13, -6), (7, -8), (25, -20), (30, -6), (12, -6),
        (12, 0), (27, 1), (38, 14), (38, 1), (39, 6), (45, 0), (47, 17), (37, 8),
        (-4, -8), (19, 0), (15, -9), (-3, -13), (0, -4), (-18, 3), (15, -1), (21, 4),
    ],
    [ // Q
        (-36, -11), (-53, -12), (-51, 0), (14, -2), (-33, -2), (-63, 1), (-11, 5), (-27, -17),
        (-110, 0), (-59, 0), (-5, 12), (-3, 0), (-8, -2), (-2, -3), (-8, -3), (-1, -8),
        (-43, -11), (-4, -7), (-4, 8), (-3, 2), (-5, 14), (9, 4), (4, 9), (-11, 0),
        (-5, -2), (-22, 9), (-4, 2), (26, 3), (7, 18), (1, 0), (4, -7), (4, 11),
        (-19, -2), (-6, 0), (-2, -3), (27, 0), (26, 2), (36, 2), (20, 0), (50, 2),
        (-22, -14), (-8, -1), (19, 0), (43, 4), (63, 0), (90, 19), (117, 3), (73, -24),
        (-25, -10), (-18, -3), (3, 3), (14, -2), (34, -16), (104, 11), (59, 0), (92, -17),
        (-5, -14), (18, -5), (29, -5), (15, 8), (47, 1), (48, 0), (46, 4), (51, -24),
    ],
    [ // P
        (3, 0), (-9, -12), (-4, 11), (0, -18), (-8, -5), (18, -23), (-3, 6), (-13, 0),
        (-5, 1), (13, 12), (-3, 11), (-38, -12), (1, -4), (35, 8), (40, 7), (-4, 4),
        (-10, -4), (-8, 1), (0, -2), (-11, 9), (5, 3), (-15, -5), (10, -6), (-9, -5),
        (-11, -3), (-2, 0), (11, -3), (34, 4), (29, 9), (-5, 0), (-14, -2), (-19, -3),
        (6, 0), (12, 11), (15, 11), (24, 21), (31, 11), (15, 10), (11, 2), (7, 6),
        (42, 15), (46, 17), (30, 21), (62, 22), (54, 17), (43, 22), (51, 18), (43, 1),
        (61, 59), (51, 39), (69, 54), (100, 60), (87, 41), (68, 51), (63, 39), (41, 50),
        (-1, -2), (0, 0), (-11, -5), (11, -4), (-6, 3), (-2, -9), (3, -8), (3, -7),
    ],
    [ // K
        (-44, -46), (27, -43), (29, -15), (-56, -23), (-1, -38), (-59, -28), (44, -24), (-26, -49),
        (-44, -27), (-20, -34), (-30, -9), (-40, -14), (-38, 0), (-12, -7), (-1, -13), (-28, -14),
        (-44, -42), (-26, -6), (-16, 3), (-29, 17), (-12, 30), (-23, 11), (-19, -14), (-53, -31),
        (-44, -27), (-11, -5), (-4, 37), (0, 40), (0, 37), (-3, 24), (-10, -4), (-44, -16),
        (-17, -25), (17, 3), (27, 21), (19, 41), (17, 35), (22, 28), (16, 2), (-20, -29),
        (-21, -26), (32, -14), (24, 9), (25, 36), (21, 36), (45, 7), (36, -7), (1, -8),
        (-13, -21), (31, -11), (31, 6), (14, 4), (23, 6), (28, -1), (46, -9), (9, -19),
        (-36, -40), (-16, -43), (-23, -23), (-44, -10), (-25, -20), (-17, 5), (30, -39), (0, -40),
    ],
]);

#[cfg(test)]
mod tests {

    use super::*;
    use fiddler_base::{game::Game, movegen::ALL};

    fn delta_helper(fen: &str) {
        let mut g = Game::from_fen(fen).unwrap();
        let orig_eval = pst_evaluate(g.board());
        for (m, _) in g.get_moves::<ALL>() {
            let new_eval = match g.board().player {
                Color::White => orig_eval + pst_delta(g.board(), m),
                Color::Black => orig_eval - pst_delta(g.board(), m),
            };
            g.make_move(m, ());
            // println!("{g}");
            assert_eq!(new_eval, pst_evaluate(g.board()));
            g.undo().unwrap();
        }
    }

    #[test]
    /// Test that adding deltas matches the same result as taking the PST value
    /// from scratch.
    fn pst_delta_equals_base_result() {
        delta_helper("r1bq1b1r/ppp2kpp/2n5/3np3/2B5/8/PPPP1PPP/RNBQK2R w KQ - 0 7");
    }

    #[test]
    fn delta_captures() {
        delta_helper("r1bq1b1r/ppp2kpp/2n5/3n4/2BPp3/2P5/PP3PPP/RNBQK2R b KQ d3 0 8");
    }

    #[test]
    fn delta_promotion() {
        delta_helper("r4bkr/pPpq2pp/2n1b3/3n4/2BPp3/2P5/1P3PPP/RNBQK2R w KQ - 1 13");
    }
}
