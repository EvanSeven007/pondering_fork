//! A module containing the information for Piece-Square Tables (PSTs). A PST
//! is given for both the early and endgame.

use fiddler_base::{
    movegen::NominateMove, Board, Color, Eval, Move, Piece, Position, Score, Square,
};

use crate::evaluate::blend_eval;

/// A lookup table for piece values. The outer index is the type of the piece
/// (in order of Pawn, Knight, Bishop, Rook, Queen, and King)
/// and the inner index is the square of the piece (from White's point of view)
/// , starting with A1 as the first index, then continuing on to B1, C1, and so
/// on until H8 as index 63.
type Pst = [[Score; 64]; Piece::NUM_TYPES];

/// A PST which is given in millipawns.
type CentiPst = [[(i16, i16); 64]; Piece::NUM_TYPES];

/// Evaluate a board based on its PST value. This is slow, so under most
/// conditions it is recommended to use `pst_delta()` instead if you are making
/// moves. The first value in the return type is the midgame difference, and
/// the second is the endgame difference.
pub fn pst_evaluate(board: &Board) -> Score {
    let mut score = (Eval::DRAW, Eval::DRAW);

    for pt in Piece::ALL_TYPES {
        for sq in board[pt] & board[Color::White] {
            score.0 += PST[pt as usize][sq as usize].0;
            score.1 += PST[pt as usize][sq as usize].1;
        }
        for sq in board[pt] & board[Color::Black] {
            //Invert the square that Black is on, since positional values are
            //flipped (as pawns move the other way, etc)
            let alt_sq = sq.opposite();

            score.0 -= PST[pt as usize][alt_sq as usize].0;
            score.1 -= PST[pt as usize][alt_sq as usize].1;
        }
    }

    score
}

/// Get the difference in PST value which would be generated by making the move
/// `m` on `board`. The first value in the return tuple is the midgame
/// difference, and the second is the endgame difference. `pst_delta` will
/// reflect how the position improves for the player making the move,
/// independed of if the player is white or black.
///
/// # Panics
///
/// `pst_delta` will panic if the given move is invalid.
pub fn pst_delta(board: &Board, m: Move) -> Score {
    let from_sq = m.from_square();
    let to_sq = m.to_square();
    let mover_type = board.type_at_square(m.from_square()).unwrap();
    let mover_idx = mover_type as usize;
    let end_type = match m.promote_type() {
        Some(pt) => pt,
        None => mover_type,
    };
    let end_idx = end_type as usize;
    let (from_alt, to_alt) = match board.player_to_move {
        Color::White => (from_sq, to_sq),
        Color::Black => (from_sq.opposite(), to_sq.opposite()),
    };
    let (from_idx, to_idx) = (from_alt as usize, to_alt as usize);

    // you always lose the value of the square you moved from
    let mut delta = (
        PST[end_idx][to_idx].0 - PST[mover_idx][from_idx].0,
        PST[end_idx][to_idx].1 - PST[mover_idx][from_idx].1,
    );

    if board[!board.player_to_move].contains(m.to_square()) {
        // conventional capture
        let to_opposite_idx = to_alt.opposite() as usize;
        let capturee_idx = board.type_at_square(to_sq).unwrap() as usize;
        delta.0 += PST[capturee_idx][to_opposite_idx].0;
        delta.1 += PST[capturee_idx][to_opposite_idx].1;
    }

    if m.is_en_passant() {
        let to_opposite_idx = (to_alt - Color::White.pawn_direction()).opposite() as usize;
        delta.0 += PST[Piece::Pawn as usize][to_opposite_idx].0;
        delta.1 += PST[Piece::Pawn as usize][to_opposite_idx].1;
    }

    if m.is_castle() {
        let is_queen_castle = to_sq.file() == 2;
        let (rook_from_idx, rook_to_idx) = match is_queen_castle {
            true => (Square::A1 as usize, Square::D1 as usize),
            false => (Square::H1 as usize, Square::F1 as usize),
        };

        delta.0 += PST[Piece::Rook as usize][rook_to_idx].0 
            - PST[Piece::Rook as usize][rook_from_idx].0;
        delta.1 += PST[Piece::Rook as usize][rook_to_idx].1 
            - PST[Piece::Rook as usize][rook_from_idx].1;
    }

    delta
}

pub struct PstNominate {}

impl NominateMove for PstNominate {
    type Output = (Score, Eval);

    #[inline(always)]
    fn score(m: Move, pos: &Position) -> Self::Output {
        let delta = pst_delta(&pos.board, m);
        (delta, blend_eval(&pos.board, delta.0, delta.1))
    }
}

/// A function used for ergonomics to convert from a table of millipawn values
/// to a table of `Eval`s.
const fn expand_table(centi_table: CentiPst) -> Pst {
    let mut table = [[(Eval::DRAW, Eval::DRAW); 64]; Piece::NUM_TYPES];
    let mut piece_idx = 0;
    // I would use for-loops here, but those are unsupported in const fns.
    while piece_idx < Piece::NUM_TYPES {
        let mut sq_idx = 0;
        while sq_idx < 64 {
            let int_score = centi_table[piece_idx][sq_idx];
            table[piece_idx][sq_idx] = (
                Eval::centipawns(int_score.0), 
                Eval::centipawns(int_score.1)
            );
            sq_idx += 1;
        }
        piece_idx += 1;
    }
    table
}

#[rustfmt::skip] // rustfmt likes to throw a million newlines in this
/// The main piece-square table. Evaluations are paired together as (midgame, 
/// endgame) to improve cache-friendliness. The indexing order of this table 
/// has its primary index as pieces, the secondary index as squares, and the 
/// innermost index as 0 for midgame and 1 for endgame.
pub const PST: Pst = expand_table([
    [
        // knights
        (-50, -50), (-40, -40), (-30, -30), (-30, -30), (-30, -30), (-30, -30), (-40, -40), (-40, -40),
        (-40, -40), (-20, -20), (1, 1), (1, 1), (1, 1), (1, 1), (-20, -20), (-40, -40),
        (-30, -30), (1, 1), (10, 10), (15, 15), (15, 15), (10, 10), (1, 1), (-30, -30),
        (-30, -30), (1, 1), (15, 15), (20, 20), (20, 20), (15, 15), (1, 1), (-30, -30),
        (-30, -30), (1, 1), (15, 15), (20, 20), (20, 20), (15, 15), (1, 1), (-30, -30),
        (-30, -30), (1, 1), (10, 10), (15, 15), (15, 15), (10, 10), (1, 1), (-30, -30),
        (-40, -40), (-20, -20), (1, 1), (1, 1), (1, 1), (1, 1), (-20, -20), (-40, -40),
        (-50, -50), (-40, -40), (-30, -30), (-30, -30), (-30, -30), (-30, -30), (-40, -40), (-40, -40),
    ],
    [
        // bishops
        (-20, -20), (-10, -10), (-10, -10), (-10, -10), (-10, -10), (-10, -10), (-10, -10), (-20, -20),
        (-10, -10), (5, 5), (0, 0), (0, 0), (0, 0), (0, 0), (5, 5), (-10, -10),
        (-10, -10), (10, 10), (10, 10), (10, 10), (10, 10), (10, 10), (10, 10), (-10, -10),
        (-10, -10), (0, 0), (10, 10), (10, 10), (10, 10), (10, 10), (0, 0), (-10, -10),
        (-10, -10), (5, 5), (5, 5), (10, 10), (10, 10), (5, 5), (5, 5), (-10, -10),
        (-10, -10), (0, 0), (5, 5), (10, 10), (10, 10), (5, 5), (0, 0), (-10, -10),
        (-10, -10), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (-10, -10),
        (-20, -20), (-10, -10), (-10, -10), (-10, -10), (-10, -10), (-10, -10), (-10, -10), (-20, -20),
    ],
    [
        // rooks
        (0, 0), (0, 0), (0, 0), (5, 5), (5, 5), (0, 0), (0, 0), (0, 0),
        (-5, -5), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (-5, -5),
        (-5, -5), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (-5, -5),
        (-5, -5), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (-5, -5),
        (-5, -5), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (-5, -5),
        (-5, -5), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (-5, -5),
        (5, 5), (10, 10), (10, 10), (10, 10), (10, 10), (10, 10), (10, 10), (5, 5),
        (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0),
    ],
    [
        // queens
        (-20, -20), (-10, -10), (-10, -10), (-5, -5), (-5, -5), (-10, -10), (-10, -10), (-20, -20),
        (-10, -10), (0, 0), (5, 5), (0, 0), (0, 0), (0, 0), (0, 0), (-10, -10),
        (-10, -10), (5, 5), (5, 5), (5, 5), (5, 5), (5, 5), (0, 0), (-10, -10),
        (0, 0), (0, 0), (5, 5), (5, 5), (5, 5), (5, 5), (0, 0), (-5, -5),
        (-5, -5), (0, 0), (5, 5), (5, 5), (5, 5), (5, 5), (0, 0), (-5, -5),
        (-10, -10), (0, 0), (5, 5), (5, 5), (5, 5), (5, 5), (0, 0), (-10, -10),
        (-10, -10), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (-10, -10),
        (-20, -20), (-10, -10), (-10, -10), (-5, -5), (-5, -5), (-10, -10), (-10, -10), (-20, -20),
    ],
    [
        // pawns
        (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0),
        (5, 5), (10, 10), (10, 10), (-20, -20), (-20, -20), (10, 10), (10, 10), (5, 5),
        (5, 5), (-5, -5), (-10, -10), (1, 1), (1, 1), (-10, -10), (-5, -5), (5, 5),
        (1, 1), (1, 1), (1, 1), (20, 20), (20, 20), (1, 1), (1, 1), (1, 1),
        (5, 5), (5, 5), (10, 10), (25, 25), (25, 25), (10, 10), (5, 5), (5, 5),
        (10, 10), (10, 10), (20, 20), (30, 30), (30, 30), (20, 20), (10, 10), (10, 10),
        (50, 50), (50, 50), (50, 50), (50, 50), (50, 50), (50, 50), (50, 50), (50, 50),
        (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0),
    ],
    [
        // kings
        (20, -50), (30, -30), (10, -30), (0, -30), (0, -30), (10, -30), (20, -30), (30, -50),
        (20, -30), (20, -30), (0, 0), (0, 0), (0, 0), (0, 0), (20, -30), (20, -30),
        (-10, -30), (-20, -10), (-20, 20), (-20, 30), (-20, 30), (-20, 20), (-20, -10), (-10, -30),
        (-20, -30), (-30, -10), (-30, 30), (-40, 40), (-40, 40), (-30, 30), (-30, -10), (-20, -30),
        (-30, -30), (-40, -10), (-40, 30), (-50, 40), (-50, 40), (-40, 30), (-30, -10), (-30, -30),
        (-30, -30), (-40, -10), (-40, 20), (-50, 30), (-50, 30), (-40, 20), (-30, -10), (-30, -30),
        (-30, -30), (-40, -20), (-40, -10), (-50, 0), (-50, 0), (-40, -10), (-30, -20), (-30, -30),
        (-30, -50), (-40, -40), (-40, -30), (-50, -20), (-50, -20), (-40, 0), (-30, -40), (-30, -50),
    ],
]);

#[cfg(test)]
mod tests {

    use super::*;
    use fiddler_base::movegen::{get_moves, NoopNominator};
    use fiddler_base::Position;

    #[test]
    /// Test that adding deltas matches the same result as taking the PST value
    /// from scratch.
    fn test_pst_delta_equals_base_result() {
        let pos = Position::from_fen(
            "r1bq1b1r/ppp2kpp/2n5/3np3/2B5/8/PPPP1PPP/RNBQK2R w KQ - 0 7",
            Position::no_eval,
        )
        .unwrap();
        let pst_original = pst_evaluate(&pos.board);

        for m in get_moves::<NoopNominator>(&pos) {
            let delta = pst_delta(&pos.board, m.0);
            let delta_eval = (pst_original.0 + delta.0, pst_original.1 + delta.1);
            let mut bcopy = pos.board;
            bcopy.make_move(m.0);
            assert_eq!(delta_eval, pst_evaluate(&bcopy));
        }
    }
}
