//! A module containing the information for Piece-Square Tables (PSTs). A PST
//! is given for both the early and endgame.

use fiddler_base::{
    movegen::NominateMove, Board, Color, Eval, Move, Piece, Position, Score, Square,
};

use crate::evaluate::blend_eval;

/// A lookup table for piece values. The outer index is the type of the piece
/// (in order of Pawn, Knight, Bishop, Rook, Queen, and King)
/// and the inner index is the square of the piece (from White's point of view)
/// , starting with A1 as the first index, then continuing on to B1, C1, and so
/// on until H8 as index 63.
type Pst = [[Score; 64]; Piece::NUM_TYPES];

/// A PST which is given in millipawns.
type CentiPst = [[(i16, i16); 64]; Piece::NUM_TYPES];

/// Evaluate a board based on its PST value. This is slow, so under most
/// conditions it is recommended to use `pst_delta()` instead if you are making
/// moves. The first value in the return type is the midgame difference, and
/// the second is the endgame difference.
pub fn pst_evaluate(board: &Board) -> Score {
    let mut score = (Eval::DRAW, Eval::DRAW);

    for pt in Piece::ALL_TYPES {
        for sq in board[pt] & board[Color::White] {
            score.0 += PST[pt as usize][sq as usize].0;
            score.1 += PST[pt as usize][sq as usize].1;
        }
        for sq in board[pt] & board[Color::Black] {
            //Invert the square that Black is on, since positional values are
            //flipped (as pawns move the other way, etc)
            let alt_sq = sq.opposite();

            score.0 -= PST[pt as usize][alt_sq as usize].0;
            score.1 -= PST[pt as usize][alt_sq as usize].1;
        }
    }

    score
}

/// Get the difference in PST value which would be generated by making the move
/// `m` on `board`. The first value in the return tuple is the midgame
/// difference, and the second is the endgame difference. `pst_delta` will
/// reflect how the position improves for the player making the move,
/// independed of if the player is white or black.
///
/// # Panics
///
/// `pst_delta` will panic if the given move is invalid.
pub fn pst_delta(board: &Board, m: Move) -> Score {
    let from_sq = m.from_square();
    let to_sq = m.to_square();
    let mover_type = board.type_at_square(m.from_square()).unwrap();
    let mover_idx = mover_type as usize;
    let end_type = match m.promote_type() {
        Some(pt) => pt,
        None => mover_type,
    };
    let end_idx = end_type as usize;
    let (from_alt, to_alt) = match board.player_to_move {
        Color::White => (from_sq, to_sq),
        Color::Black => (from_sq.opposite(), to_sq.opposite()),
    };
    let (from_idx, to_idx) = (from_alt as usize, to_alt as usize);

    // you always lose the value of the square you moved from
    let mut delta = (
        PST[end_idx][to_idx].0 - PST[mover_idx][from_idx].0,
        PST[end_idx][to_idx].1 - PST[mover_idx][from_idx].1,
    );

    if board[!board.player_to_move].contains(m.to_square()) {
        // conventional capture
        let to_opposite_idx = to_alt.opposite() as usize;
        let capturee_idx = board.type_at_square(to_sq).unwrap() as usize;
        delta.0 += PST[capturee_idx][to_opposite_idx].0;
        delta.1 += PST[capturee_idx][to_opposite_idx].1;
    }

    if m.is_en_passant() {
        let to_opposite_idx = (to_alt - Color::White.pawn_direction()).opposite() as usize;
        delta.0 += PST[Piece::Pawn as usize][to_opposite_idx].0;
        delta.1 += PST[Piece::Pawn as usize][to_opposite_idx].1;
    }

    if m.is_castle() {
        let is_queen_castle = to_sq.file() == 2;
        let (rook_from_idx, rook_to_idx) = match is_queen_castle {
            true => (Square::A1 as usize, Square::D1 as usize),
            false => (Square::H1 as usize, Square::F1 as usize),
        };

        delta.0 +=
            PST[Piece::Rook as usize][rook_to_idx].0 - PST[Piece::Rook as usize][rook_from_idx].0;
        delta.1 +=
            PST[Piece::Rook as usize][rook_to_idx].1 - PST[Piece::Rook as usize][rook_from_idx].1;
    }

    delta
}

pub struct PstNominate {}

impl NominateMove for PstNominate {
    type Output = (Score, Eval);

    #[inline(always)]
    fn score(m: Move, pos: &Position) -> Self::Output {
        let delta = pst_delta(&pos.board, m);
        (delta, blend_eval(&pos.board, delta.0, delta.1))
    }
}

/// A function used for ergonomics to convert from a table of millipawn values
/// to a table of `Eval`s.
const fn expand_table(centi_table: CentiPst) -> Pst {
    let mut table = [[(Eval::DRAW, Eval::DRAW); 64]; Piece::NUM_TYPES];
    let mut piece_idx = 0;
    // I would use for-loops here, but those are unsupported in const fns.
    while piece_idx < Piece::NUM_TYPES {
        let mut sq_idx = 0;
        while sq_idx < 64 {
            let int_score = centi_table[piece_idx][sq_idx];
            table[piece_idx][sq_idx] =
                (Eval::centipawns(int_score.0), Eval::centipawns(int_score.1));
            sq_idx += 1;
        }
        piece_idx += 1;
    }
    table
}

#[rustfmt::skip] // rustfmt likes to throw a million newlines in this
/// The main piece-square table. Evaluations are paired together as (midgame, 
/// endgame) to improve cache-friendliness. The indexing order of this table 
/// has its primary index as pieces, the secondary index as squares, and the 
/// innermost index as 0 for midgame and 1 for endgame.
pub const PST: Pst = expand_table([
    [ // N
        (-127, -51), (-34, -28), (-66, -22), (-56, -20), (-49, -30), (-56, -25), (-37, -33), (-68, -32),
        (-90, -30), (-56, -13), (-22, 5), (-3, 1), (-9, 2), (-25, 0), (-36, -15), (-43, -42),
        (-47, -24), (-7, 10), (35, 6), (11, 7), (13, 8), (38, 17), (6, -2), (-47, -34),
        (-16, -25), (-16, 7), (18, 28), (12, 21), (17, 15), (9, 12), (0, -3), (-13, -28), 
        (-1, -28), (17, -1), (41, 9), (61, 21), (42, 18), (72, 22), (13, -7), (27, -27),
        (-9, -32), (34, -1), (-9, 8), (72, 6), (60, 11), (-10, 4), (47, -11), (23, -25),
        (-25, -38), (-11, -30), (68, -8), (-15, 0), (30, 3), (36, -2), (-4, -15), (-12, -31),
        (-79, -44), (-49, -43), (-46, -22), (-39, -28), (-26, -33), (-57, -31), (-40, -34), (-87, -34),
    ],
    [ // B
        (-53, -24), (-18, -1), (-7, -17), (-57, -5), (-58, -5), (-13, -10), (-30, -5), (-51, -18),
        (-24, 2), (5, -1), (2, -3), (-8, -1), (0, 0), (-26, -3), (24, 11), (-23, -10),
        (-3, -14), (6, 11), (-2, 9), (35, 0), (29, -4), (-11, 11), (12, 18), (-14, -5),
        (-19, -4), (-13, -4), (29, 10), (8, 11), (4, 5), (23, 13), (-11, -4), (-6, -6),
        (6, -6), (13, 0), (17, 8), (27, 4), (25, 11), (21, 12), (8, 11), (9, -15),
        (-7, -3), (12, 4), (-52, 0), (26, 9), (5, 2), (-76, -2), (48, -2), (27, -3),
        (-31, -2), (-2, 7), (0, 2), (-87, 7), (-75, 2), (-7, 1), (-16, 5), (5, -12),
        (-27, -8), (-24, 5), (-30, -5), (-34, 0), (-24, -13), (-68, 0), (-28, -16), (-11, -18),
    ],
    [ // R
        (-38, 9), (-20, 2), (-5, 2), (4, 3), (-2, 9), (-5, -7), (1, -2), (-49, 8),
        (-43, -4), (-32, 2), (-23, -7), (-23, -1), (-26, -1), (-22, 0), (-17, 7), (-29, -2),
        (-31, -4), (-11, 2), (-13, 0), (-18, -13), (-20, -6), (-16, -2), (-1, 0), (-19, -7),
        (-5, 1), (-5, 5), (-2, -3), (-4, -5), (-7, -6), (-10, -2), (-12, -2), (-11, -11),
        (4, 0), (-1, 0), (18, 7), (13, 2), (12, 1), (15, -1), (13, -10), (10, -6),
        (14, -4), (22, -1), (29, -1), (33, -7), (22, -8), (35, -8), (37, -4), (31, -6),
        (24, 5), (35, 10), (49, 6), (51, 3), (49, 18), (55, 1), (50, 9), (45, 4),
        (-11, -4), (15, 3), (14, -8), (3, -10), (4, -3), (-20, 0), (9, 2), (22, 1),
    ],
    [ // Q
        (-36, -12), (-57, -9), (-50, -5), (12, -4), (-37, -2), (-59, -5), (-9, -4), (-25, -15),
        (-100, -8), (-67, -1), (-5, 7), (-3, 0), (-8, 0), (-10, -1), (-14, 3), (-9, -3),
        (-42, -9), (-1, 0), (-5, 0), (-3, 0), (-7, 4), (9, 0), (0, -2), (-10, -1),
        (-7, -8), (-21, 5), (-3, 7), (28, 8), (11, 8), (0, -1), (6, 0), (8, 9),
        (-15, -7), (-8, -6), (7, 1), (31, 6), (33, -2), (38, 0), (21, -4), (47, 1),
        (-17, -13), (3, 5), (26, 7), (43, 3), (65, 5), (93, 16), (118, -2), (78, -8),
        (-25, -9), (-16, 0), (9, -1), (19, -5), (28, -7), (108, 4), (69, -7), (93, -19),
        (-12, -22), (5, -15), (12, -14), (0, -6), (34, -1), (25, -5), (18, -8), (37, -18),
    ],
    [ // P
        (-2, -4), (-4, -8), (0, 0), (-2, -5), (-3, -9), (11, -15), (-6, 5), (-2, 2),
        (-5, 7), (13, 9), (-4, 11), (-41, -18), (-1, -16), (30, 12), (33, 4), (-4, 6),
        (-12, 13), (-7, -8), (-1, -4), (-11, 4), (3, 5), (-13, -10), (6, -6), (-12, 10),
        (-11, -1), (-1, -2), (8, 0), (31, 10), (25, 6), (-6, -3), (-10, 3), (-17, -5),
        (13, 4), (14, 4), (14, 10), (23, 23), (28, 24), (17, 7), (12, 0), (10, 8),
        (44, 13), (54, 14), (31, 13), (58, 17), (52, 33), (48, 21), (58, 17), (46, 16),
        (69, 55), (65, 34), (78, 50), (106, 50), (94, 45), (83, 46), (75, 41), (54, 54),
        (0, -3), (-5, -2), (1, -5), (14, 7), (-4, -4), (-7, 3), (12, 3), (8, -6),
    ],
    [ // K
        (-50, -41), (19, -38), (21, -29), (-65, -26), (-9, -38), (-64, -36), (34, -31), (-32, -47),
        (-47, -24), (-25, -27), (-34, -5), (-37, 1), (-35, 0), (-21, -5), (-9, -18), (-32, -30),
        (-49, -39), (-41, -8), (-29, 15), (-27, 29), (-20, 41), (-25, 14), (-29, -18), (-60, -31),
        (-33, -33), (-18, 0), (-10, 32), (-2, 43), (-5, 45), (-11, 22), (-24, -8), (-50, -21),
        (-26, -31), (2, 0), (15, 18), (11, 45), (15, 33), (15, 35), (10, -1), (-20, -29),
        (-26, -23), (13, -10), (12, 23), (7, 31), (6, 32), (26, 8), (29, -6), (-5, -21),
        (-23, -26), (-6, -16), (8, -8), (-2, 3), (-2, 3), (6, -13), (21, -12), (9, -23),
        (-29, -59), (-34, -44), (-25, -27), (-41, -17), (-40, -25), (-23, -2), (9, -46), (-13, -43),
    ],
]);

#[cfg(test)]
mod tests {

    use super::*;
    use fiddler_base::movegen::{get_moves, NoopNominator};
    use fiddler_base::Position;

    #[test]
    /// Test that adding deltas matches the same result as taking the PST value
    /// from scratch.
    fn test_pst_delta_equals_base_result() {
        let pos = Position::from_fen(
            "r1bq1b1r/ppp2kpp/2n5/3np3/2B5/8/PPPP1PPP/RNBQK2R w KQ - 0 7",
            Position::no_eval,
        )
        .unwrap();
        let pst_original = pst_evaluate(&pos.board);

        for m in get_moves::<NoopNominator>(&pos) {
            let delta = pst_delta(&pos.board, m.0);
            let delta_eval = (pst_original.0 + delta.0, pst_original.1 + delta.1);
            let mut bcopy = pos.board;
            bcopy.make_move(m.0);
            assert_eq!(delta_eval, pst_evaluate(&bcopy));
        }
    }
}
